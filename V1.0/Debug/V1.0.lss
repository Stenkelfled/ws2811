
V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000394  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000768  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000010b  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b89  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fd  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000252a  00000000  00000000  000042d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00006800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00025362  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d6  00000000  00000000  0002bf72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0002d548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008bec  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__bad_interrupt>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
   a:	00 00       	nop
   c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
   e:	00 00       	nop
  10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
  12:	00 00       	nop
  14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
  16:	00 00       	nop
  18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f7 c0       	rjmp	.+494    	; 0x210 <__bad_interrupt>
  22:	00 00       	nop
  24:	f5 c0       	rjmp	.+490    	; 0x210 <__bad_interrupt>
  26:	00 00       	nop
  28:	f3 c0       	rjmp	.+486    	; 0x210 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f1 c0       	rjmp	.+482    	; 0x210 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ef c0       	rjmp	.+478    	; 0x210 <__bad_interrupt>
  32:	00 00       	nop
  34:	ed c0       	rjmp	.+474    	; 0x210 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c0       	rjmp	.+470    	; 0x210 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c0       	rjmp	.+454    	; 0x210 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e1 c0       	rjmp	.+450    	; 0x210 <__bad_interrupt>
  4e:	00 00       	nop
  50:	df c0       	rjmp	.+446    	; 0x210 <__bad_interrupt>
  52:	00 00       	nop
  54:	dd c0       	rjmp	.+442    	; 0x210 <__bad_interrupt>
  56:	00 00       	nop
  58:	db c0       	rjmp	.+438    	; 0x210 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d9 c0       	rjmp	.+434    	; 0x210 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d7 c0       	rjmp	.+430    	; 0x210 <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c0       	rjmp	.+426    	; 0x210 <__bad_interrupt>
  66:	00 00       	nop
  68:	d3 c0       	rjmp	.+422    	; 0x210 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d1 c0       	rjmp	.+418    	; 0x210 <__bad_interrupt>
  6e:	00 00       	nop
  70:	cf c0       	rjmp	.+414    	; 0x210 <__bad_interrupt>
  72:	00 00       	nop
  74:	cd c0       	rjmp	.+410    	; 0x210 <__bad_interrupt>
  76:	00 00       	nop
  78:	cb c0       	rjmp	.+406    	; 0x210 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c9 c0       	rjmp	.+402    	; 0x210 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c7 c0       	rjmp	.+398    	; 0x210 <__bad_interrupt>
  82:	00 00       	nop
  84:	c5 c0       	rjmp	.+394    	; 0x210 <__bad_interrupt>
  86:	00 00       	nop
  88:	c3 c0       	rjmp	.+390    	; 0x210 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 c0       	rjmp	.+386    	; 0x210 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bf c0       	rjmp	.+382    	; 0x210 <__bad_interrupt>
  92:	00 00       	nop
  94:	bd c0       	rjmp	.+378    	; 0x210 <__bad_interrupt>
  96:	00 00       	nop
  98:	bb c0       	rjmp	.+374    	; 0x210 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b9 c0       	rjmp	.+370    	; 0x210 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b7 c0       	rjmp	.+366    	; 0x210 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b5 c0       	rjmp	.+362    	; 0x210 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b3 c0       	rjmp	.+358    	; 0x210 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b1 c0       	rjmp	.+354    	; 0x210 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	af c0       	rjmp	.+350    	; 0x210 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ad c0       	rjmp	.+346    	; 0x210 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ab c0       	rjmp	.+342    	; 0x210 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a9 c0       	rjmp	.+338    	; 0x210 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a7 c0       	rjmp	.+334    	; 0x210 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a3 c0       	rjmp	.+326    	; 0x210 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c0       	rjmp	.+322    	; 0x210 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9f c0       	rjmp	.+318    	; 0x210 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9d c0       	rjmp	.+314    	; 0x210 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9b c0       	rjmp	.+310    	; 0x210 <__bad_interrupt>
  da:	00 00       	nop
  dc:	99 c0       	rjmp	.+306    	; 0x210 <__bad_interrupt>
  de:	00 00       	nop
  e0:	97 c0       	rjmp	.+302    	; 0x210 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	95 c0       	rjmp	.+298    	; 0x210 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	93 c0       	rjmp	.+294    	; 0x210 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	91 c0       	rjmp	.+290    	; 0x210 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8f c0       	rjmp	.+286    	; 0x210 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8d c0       	rjmp	.+282    	; 0x210 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8b c0       	rjmp	.+278    	; 0x210 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	89 c0       	rjmp	.+274    	; 0x210 <__bad_interrupt>
  fe:	00 00       	nop
 100:	87 c0       	rjmp	.+270    	; 0x210 <__bad_interrupt>
 102:	00 00       	nop
 104:	85 c0       	rjmp	.+266    	; 0x210 <__bad_interrupt>
 106:	00 00       	nop
 108:	83 c0       	rjmp	.+262    	; 0x210 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	81 c0       	rjmp	.+258    	; 0x210 <__bad_interrupt>
 10e:	00 00       	nop
 110:	7f c0       	rjmp	.+254    	; 0x210 <__bad_interrupt>
 112:	00 00       	nop
 114:	7d c0       	rjmp	.+250    	; 0x210 <__bad_interrupt>
 116:	00 00       	nop
 118:	7b c0       	rjmp	.+246    	; 0x210 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	79 c0       	rjmp	.+242    	; 0x210 <__bad_interrupt>
 11e:	00 00       	nop
 120:	77 c0       	rjmp	.+238    	; 0x210 <__bad_interrupt>
 122:	00 00       	nop
 124:	75 c0       	rjmp	.+234    	; 0x210 <__bad_interrupt>
 126:	00 00       	nop
 128:	73 c0       	rjmp	.+230    	; 0x210 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	71 c0       	rjmp	.+226    	; 0x210 <__bad_interrupt>
 12e:	00 00       	nop
 130:	6f c0       	rjmp	.+222    	; 0x210 <__bad_interrupt>
 132:	00 00       	nop
 134:	6d c0       	rjmp	.+218    	; 0x210 <__bad_interrupt>
 136:	00 00       	nop
 138:	6b c0       	rjmp	.+214    	; 0x210 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	69 c0       	rjmp	.+210    	; 0x210 <__bad_interrupt>
 13e:	00 00       	nop
 140:	67 c0       	rjmp	.+206    	; 0x210 <__bad_interrupt>
 142:	00 00       	nop
 144:	65 c0       	rjmp	.+202    	; 0x210 <__bad_interrupt>
 146:	00 00       	nop
 148:	63 c0       	rjmp	.+198    	; 0x210 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	61 c0       	rjmp	.+194    	; 0x210 <__bad_interrupt>
 14e:	00 00       	nop
 150:	5f c0       	rjmp	.+190    	; 0x210 <__bad_interrupt>
 152:	00 00       	nop
 154:	5d c0       	rjmp	.+186    	; 0x210 <__bad_interrupt>
 156:	00 00       	nop
 158:	5b c0       	rjmp	.+182    	; 0x210 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	59 c0       	rjmp	.+178    	; 0x210 <__bad_interrupt>
 15e:	00 00       	nop
 160:	57 c0       	rjmp	.+174    	; 0x210 <__bad_interrupt>
 162:	00 00       	nop
 164:	55 c0       	rjmp	.+170    	; 0x210 <__bad_interrupt>
 166:	00 00       	nop
 168:	53 c0       	rjmp	.+166    	; 0x210 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	51 c0       	rjmp	.+162    	; 0x210 <__bad_interrupt>
 16e:	00 00       	nop
 170:	4f c0       	rjmp	.+158    	; 0x210 <__bad_interrupt>
 172:	00 00       	nop
 174:	4d c0       	rjmp	.+154    	; 0x210 <__bad_interrupt>
 176:	00 00       	nop
 178:	4b c0       	rjmp	.+150    	; 0x210 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	49 c0       	rjmp	.+146    	; 0x210 <__bad_interrupt>
 17e:	00 00       	nop
 180:	47 c0       	rjmp	.+142    	; 0x210 <__bad_interrupt>
 182:	00 00       	nop
 184:	45 c0       	rjmp	.+138    	; 0x210 <__bad_interrupt>
 186:	00 00       	nop
 188:	43 c0       	rjmp	.+134    	; 0x210 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__bad_interrupt>
 18e:	00 00       	nop
 190:	3f c0       	rjmp	.+126    	; 0x210 <__bad_interrupt>
 192:	00 00       	nop
 194:	3d c0       	rjmp	.+122    	; 0x210 <__bad_interrupt>
 196:	00 00       	nop
 198:	3b c0       	rjmp	.+118    	; 0x210 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	39 c0       	rjmp	.+114    	; 0x210 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	37 c0       	rjmp	.+110    	; 0x210 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	33 c0       	rjmp	.+102    	; 0x210 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	31 c0       	rjmp	.+98     	; 0x210 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2d c0       	rjmp	.+90     	; 0x210 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	23 c0       	rjmp	.+70     	; 0x210 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	91 d0       	rcall	.+290    	; 0x330 <main>
 20e:	c0 c0       	rjmp	.+384    	; 0x390 <_exit>

00000210 <__bad_interrupt>:
 210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <sysclk_init+0x6>
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	80 93 70 00 	sts	0x0070, r24
 224:	80 93 71 00 	sts	0x0071, r24
 228:	80 93 72 00 	sts	0x0072, r24
 22c:	80 93 73 00 	sts	0x0073, r24
 230:	80 93 74 00 	sts	0x0074, r24
 234:	80 93 75 00 	sts	0x0075, r24
 238:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
 23c:	64 e0       	ldi	r22, 0x04	; 4
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	66 d0       	rcall	.+204    	; 0x310 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
 244:	6c e1       	ldi	r22, 0x1C	; 28
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	68 d0       	rcall	.+208    	; 0x31c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
 24c:	8a 83       	std	Y+2, r24	; 0x02
 24e:	6d e1       	ldi	r22, 0x1D	; 29
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	63 d0       	rcall	.+198    	; 0x31c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
 256:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	9a 81       	ldd	r25, Y+2	; 0x02
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	21 f4       	brne	.+8      	; 0x268 <sysclk_init+0x56>
		cal = 0x2340;
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	93 e2       	ldi	r25, 0x23	; 35
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	8b 83       	std	Y+3, r24	; 0x03
 26e:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
 270:	e0 e6       	ldi	r30, 0x60	; 96
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
 276:	8c 81       	ldd	r24, Y+4	; 0x04
 278:	83 83       	std	Z+3, r24	; 0x03

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 27a:	e0 e5       	ldi	r30, 0x50	; 80
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 280:	84 fd       	sbrc	r24, 4
 282:	34 c0       	rjmp	.+104    	; 0x2ec <sysclk_init+0xda>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 284:	81 81       	ldd	r24, Z+1	; 0x01
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
 286:	81 fd       	sbrc	r24, 1
 288:	24 c0       	rjmp	.+72     	; 0x2d2 <sysclk_init+0xc0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 28a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 28c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 28e:	90 81       	ld	r25, Z
 290:	92 60       	ori	r25, 0x02	; 2
 292:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 294:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 296:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 298:	81 ff       	sbrs	r24, 1
 29a:	fd cf       	rjmp	.-6      	; 0x296 <sysclk_init+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 29c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 29e:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
 2a0:	a0 e5       	ldi	r26, 0x50	; 80
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	16 96       	adiw	r26, 0x06	; 6
 2a6:	9c 91       	ld	r25, X
 2a8:	16 97       	sbiw	r26, 0x06	; 6
 2aa:	99 7f       	andi	r25, 0xF9	; 249
 2ac:	16 96       	adiw	r26, 0x06	; 6
 2ae:	9c 93       	st	X, r25
 2b0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
 2b2:	e0 e6       	ldi	r30, 0x60	; 96
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 e8       	ldi	r25, 0x80	; 128
 2b8:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
 2ba:	9b eb       	ldi	r25, 0xBB	; 187
 2bc:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
 2be:	16 96       	adiw	r26, 0x06	; 6
 2c0:	9c 91       	ld	r25, X
 2c2:	16 97       	sbiw	r26, 0x06	; 6
 2c4:	94 60       	ori	r25, 0x04	; 4
 2c6:	16 96       	adiw	r26, 0x06	; 6
 2c8:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 2ca:	90 81       	ld	r25, Z
 2cc:	91 60       	ori	r25, 0x01	; 1
 2ce:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2d0:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2d2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 2d4:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 2d6:	e0 e5       	ldi	r30, 0x50	; 80
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	95 e8       	ldi	r25, 0x85	; 133
 2dc:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 2de:	90 81       	ld	r25, Z
 2e0:	90 61       	ori	r25, 0x10	; 16
 2e2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2e4:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 2e8:	84 ff       	sbrs	r24, 4
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <sysclk_init+0xd4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e d0       	rcall	.+28     	; 0x310 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2f4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 2f6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 2f8:	e0 e5       	ldi	r30, 0x50	; 80
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	90 81       	ld	r25, Z
 2fe:	9e 7f       	andi	r25, 0xFE	; 254
 300:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 302:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 304:	24 96       	adiw	r28, 0x04	; 4
 306:	cd bf       	out	0x3d, r28	; 61
 308:	de bf       	out	0x3e, r29	; 62
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 310:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 312:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 314:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 316:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 318:	60 83       	st	Z, r22
	ret                             // Return to caller
 31a:	08 95       	ret

0000031c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
 31c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
 320:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
 322:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
 324:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
 328:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
 32a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
 32e:	08 95       	ret

00000330 <main>:
 */
#include <asf.h>

int main (void)
{
	sysclk_init();
 330:	70 df       	rcall	.-288    	; 0x212 <sysclk_init>
	board_init();
 332:	0f d0       	rcall	.+30     	; 0x352 <board_init>
	
	PORTA_DIRSET = 0x50;
 334:	e1 e0       	ldi	r30, 0x01	; 1
 336:	f6 e0       	ldi	r31, 0x06	; 6
 338:	80 e5       	ldi	r24, 0x50	; 80
 33a:	80 83       	st	Z, r24
	PORTA_DIRSET = 0x01;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 83       	st	Z, r24
	PORTA_DIRCLR = 0x10;
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	80 93 02 06 	sts	0x0602, r24
	PORTB_DIRSET = 0x03;
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	80 93 21 06 	sts	0x0621, r24

	// Insert application code here, after the board has been initialized.
}
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

00000352 <board_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 352:	e0 e6       	ldi	r30, 0x60	; 96
 354:	f6 e0       	ldi	r31, 0x06	; 6
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	86 83       	std	Z+6, r24	; 0x06
 35a:	a0 e2       	ldi	r26, 0x20	; 32
 35c:	b6 e0       	ldi	r27, 0x06	; 6
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	16 96       	adiw	r26, 0x06	; 6
 362:	9c 93       	st	X, r25
 364:	16 97       	sbiw	r26, 0x06	; 6
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 366:	81 83       	std	Z+1, r24	; 0x01
 368:	11 96       	adiw	r26, 0x01	; 1
 36a:	9c 93       	st	X, r25
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
 36c:	a0 e8       	ldi	r26, 0x80	; 128
 36e:	b6 e0       	ldi	r27, 0x06	; 6
 370:	12 96       	adiw	r26, 0x02	; 2
 372:	8c 93       	st	X, r24
 374:	12 97       	sbiw	r26, 0x02	; 2
 376:	84 e0       	ldi	r24, 0x04	; 4
 378:	12 96       	adiw	r26, 0x02	; 2
 37a:	8c 93       	st	X, r24
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	82 83       	std	Z+2, r24	; 0x02
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 380:	e0 e4       	ldi	r30, 0x40	; 64
 382:	f6 e0       	ldi	r31, 0x06	; 6
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	86 83       	std	Z+6, r24	; 0x06
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 388:	81 83       	std	Z+1, r24	; 0x01
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
