
USB_uC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  00000fec  00001080  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028a  00802122  00802122  000011a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003840  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c44  00000000  00000000  00004b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001492  00000000  00000000  000057c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000037c  00000000  00000000  00006c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001eaf  00000000  00000000  00006fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011b2  00000000  00000000  00008e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000a035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c1       	rjmp	.+662    	; 0x298 <__ctors_end>
   2:	00 00       	nop
   4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
  92:	00 00       	nop
  94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
  96:	00 00       	nop
  98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	0c c1       	rjmp	.+536    	; 0x2d6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
  da:	00 00       	nop
  dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
  de:	00 00       	nop
  e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	f6 c0       	rjmp	.+492    	; 0x2d6 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
  fe:	00 00       	nop
 100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
 102:	00 00       	nop
 104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
 106:	00 00       	nop
 108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
 10e:	00 00       	nop
 110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
 112:	00 00       	nop
 114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
 116:	00 00       	nop
 118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	dc c0       	rjmp	.+440    	; 0x2d6 <__bad_interrupt>
 11e:	00 00       	nop
 120:	da c0       	rjmp	.+436    	; 0x2d6 <__bad_interrupt>
 122:	00 00       	nop
 124:	d8 c0       	rjmp	.+432    	; 0x2d6 <__bad_interrupt>
 126:	00 00       	nop
 128:	d6 c0       	rjmp	.+428    	; 0x2d6 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
 12e:	00 00       	nop
 130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
 132:	00 00       	nop
 134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
 136:	00 00       	nop
 138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
 13e:	00 00       	nop
 140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
 142:	00 00       	nop
 144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
 146:	00 00       	nop
 148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
 14e:	00 00       	nop
 150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
 152:	00 00       	nop
 154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
 156:	00 00       	nop
 158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
 15e:	00 00       	nop
 160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
 162:	00 00       	nop
 164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
 166:	00 00       	nop
 168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	b4 c0       	rjmp	.+360    	; 0x2d6 <__bad_interrupt>
 16e:	00 00       	nop
 170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
 172:	00 00       	nop
 174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
 176:	00 00       	nop
 178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
 17e:	00 00       	nop
 180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
 182:	00 00       	nop
 184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
 186:	00 00       	nop
 188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
 18e:	00 00       	nop
 190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
 192:	00 00       	nop
 194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
 196:	00 00       	nop
 198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	40 c6       	rjmp	.+3200   	; 0xe76 <__vector_125>
 1f6:	00 00       	nop
 1f8:	bc c6       	rjmp	.+3448   	; 0xf72 <__vector_126>
 1fa:	00 00       	nop
 1fc:	15 06       	cpc	r1, r21
 1fe:	2a 06       	cpc	r2, r26
 200:	26 07       	cpc	r18, r22
 202:	2a 06       	cpc	r2, r26
 204:	26 07       	cpc	r18, r22
 206:	3a 06       	cpc	r3, r26
 208:	5e 06       	cpc	r5, r30
 20a:	26 07       	cpc	r18, r22
 20c:	bd 06       	cpc	r11, r29
 20e:	d1 06       	cpc	r13, r17
 210:	2a 07       	cpc	r18, r26
 212:	10 07       	cpc	r17, r16

00000214 <ProductString>:
 214:	1e 03 43 00 4e 00 43 00 20 00 43 00 6f 00 6e 00     ..C.N.C. .C.o.n.
 224:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00     t.r.o.l.l.e.r...

00000234 <ManufacturerString>:
 234:	0e 03 77 00 6f 00 6f 00 64 00 79 00 6d 00 00 00     ..w.o.o.d.y.m...

00000244 <LanguageString>:
 244:	04 03 09 04                                         ....

00000248 <ConfigurationDescriptor>:
 248:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
 258:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 268:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 278:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

00000286 <DeviceDescriptor>:
 286:	12 01 10 01 02 00 00 40 eb 03 4b 20 01 00 01 02     .......@..K ....
 296:	dc 01                                               ..

00000298 <__ctors_end>:
 298:	11 24       	eor	r1, r1
 29a:	1f be       	out	0x3f, r1	; 63
 29c:	cf ef       	ldi	r28, 0xFF	; 255
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	df e3       	ldi	r29, 0x3F	; 63
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	0c bf       	out	0x3c, r16	; 60

000002a8 <__do_copy_data>:
 2a8:	11 e2       	ldi	r17, 0x21	; 33
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e2       	ldi	r27, 0x20	; 32
 2ae:	ec ee       	ldi	r30, 0xEC	; 236
 2b0:	ff e0       	ldi	r31, 0x0F	; 15
 2b2:	00 e0       	ldi	r16, 0x00	; 0
 2b4:	0b bf       	out	0x3b, r16	; 59
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
 2b8:	07 90       	elpm	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	a2 32       	cpi	r26, 0x22	; 34
 2be:	b1 07       	cpc	r27, r17
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
 2c2:	23 e2       	ldi	r18, 0x23	; 35
 2c4:	a2 e2       	ldi	r26, 0x22	; 34
 2c6:	b1 e2       	ldi	r27, 0x21	; 33
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
 2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
 2cc:	ac 3a       	cpi	r26, 0xAC	; 172
 2ce:	b2 07       	cpc	r27, r18
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
 2d2:	8e d0       	rcall	.+284    	; 0x3f0 <main>
 2d4:	89 c6       	rjmp	.+3346   	; 0xfe8 <_exit>

000002d6 <__bad_interrupt>:
 2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 2d8:	29 2f       	mov	r18, r25
 2da:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2dc:	22 30       	cpi	r18, 0x02	; 2
 2de:	31 05       	cpc	r19, r1
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <CALLBACK_USB_GetDescriptor+0x20>
 2e2:	23 30       	cpi	r18, 0x03	; 3
 2e4:	31 05       	cpc	r19, r1
 2e6:	69 f0       	breq	.+26     	; 0x302 <CALLBACK_USB_GetDescriptor+0x2a>
 2e8:	21 30       	cpi	r18, 0x01	; 1
 2ea:	31 05       	cpc	r19, r1
 2ec:	29 f1       	breq	.+74     	; 0x338 <CALLBACK_USB_GetDescriptor+0x60>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	29 c0       	rjmp	.+82     	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2f8:	8e e3       	ldi	r24, 0x3E	; 62
 2fa:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 2fc:	28 e4       	ldi	r18, 0x48	; 72
 2fe:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 300:	24 c0       	rjmp	.+72     	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>
 302:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	91 05       	cpc	r25, r1
 308:	59 f0       	breq	.+22     	; 0x320 <CALLBACK_USB_GetDescriptor+0x48>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	91 05       	cpc	r25, r1
 30e:	71 f0       	breq	.+28     	; 0x32c <CALLBACK_USB_GetDescriptor+0x54>
 310:	89 2b       	or	r24, r25
 312:	b9 f4       	brne	.+46     	; 0x342 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 314:	e4 e4       	ldi	r30, 0x44	; 68
 316:	f2 e0       	ldi	r31, 0x02	; 2
 318:	84 91       	lpm	r24, Z
 31a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
 31c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
 31e:	15 c0       	rjmp	.+42     	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 320:	e4 e3       	ldi	r30, 0x34	; 52
 322:	f2 e0       	ldi	r31, 0x02	; 2
 324:	84 91       	lpm	r24, Z
 326:	90 e0       	ldi	r25, 0x00	; 0
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = &ManufacturerString;
 328:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
 32a:	0f c0       	rjmp	.+30     	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 32c:	e4 e1       	ldi	r30, 0x14	; 20
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	84 91       	lpm	r24, Z
 332:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 334:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 336:	09 c0       	rjmp	.+18     	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 338:	82 e1       	ldi	r24, 0x12	; 18
 33a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 33c:	26 e8       	ldi	r18, 0x86	; 134
 33e:	32 e0       	ldi	r19, 0x02	; 2
 340:	04 c0       	rjmp	.+8      	; 0x34a <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 34a:	fa 01       	movw	r30, r20
 34c:	20 83       	st	Z, r18
 34e:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
 350:	08 95       	ret

00000352 <Config32MHzClock>:
//	CLK.CTRL = 0x01; //select sysclock 32MHz osc


	/////////////////////////////////////////////////////////////////
	// get USBRCOSC
	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	e0 ec       	ldi	r30, 0xC0	; 192
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	82 87       	std	Z+10, r24	; 0x0a
	tmp = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
 35a:	ec e1       	ldi	r30, 0x1C	; 28
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	84 91       	lpm	r24, Z
	/* Clean up NVM Command register. */ 
	NVM_CMD = NVM_CMD_NO_OPERATION_gc; 
 360:	10 92 ca 01 	sts	0x01CA, r1
	//
	/////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////
	// enable DFLL for 32MHz osz and trim to 48MHz sync with USB start of frame
	OSC.DFLLCTRL = OSC_RC32MCREF_USBSOF_gc;
 364:	e0 e5       	ldi	r30, 0x50	; 80
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	94 e0       	ldi	r25, 0x04	; 4
 36a:	96 83       	std	Z+6, r25	; 0x06
	DFLLRC32M.CALB = tmp;
 36c:	a0 e6       	ldi	r26, 0x60	; 96
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	13 96       	adiw	r26, 0x03	; 3
 372:	8c 93       	st	X, r24
 374:	13 97       	sbiw	r26, 0x03	; 3
	DFLLRC32M.COMP1 = 0x1B; //Xmega AU manual, 4.17.19
 376:	8b e1       	ldi	r24, 0x1B	; 27
 378:	15 96       	adiw	r26, 0x05	; 5
 37a:	8c 93       	st	X, r24
 37c:	15 97       	sbiw	r26, 0x05	; 5
	DFLLRC32M.COMP2 = 0xB7;
 37e:	87 eb       	ldi	r24, 0xB7	; 183
 380:	16 96       	adiw	r26, 0x06	; 6
 382:	8c 93       	st	X, r24
 384:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8c 93       	st	X, r24
	//
	/////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////
	// enable 32 MHZ osz (trimmed to 48MHZ for usb)
	CCP = CCP_IOREG_gc; //Security Signature to modify clock 
 38a:	88 ed       	ldi	r24, 0xD8	; 216
 38c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm| OSC_RC2MEN_bm; // enable internal 32MHz oscillator
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	80 83       	st	Z, r24
    
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator ready
 392:	81 81       	ldd	r24, Z+1	; 0x01
 394:	81 ff       	sbrs	r24, 1
 396:	fd cf       	rjmp	.-6      	; 0x392 <Config32MHzClock+0x40>
	//
	/////////////////////////////////////////////////////////////////
	
	OSC.PLLCTRL = OSC_PLLSRC_RC2M_gc | 16; // 2MHz * 16 = 32MHz
 398:	e0 e5       	ldi	r30, 0x50	; 80
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 e1       	ldi	r24, 0x10	; 16
 39e:	85 83       	std	Z+5, r24	; 0x05
    
	CCP = CCP_IOREG_gc;
 3a0:	88 ed       	ldi	r24, 0xD8	; 216
 3a2:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm | OSC_PLLEN_bm | OSC_RC2MEN_bm ; // Enable PLL
 3a4:	83 e1       	ldi	r24, 0x13	; 19
 3a6:	80 83       	st	Z, r24
    
	while(!(OSC.STATUS & OSC_PLLRDY_bm)); // wait for PLL ready
 3a8:	81 81       	ldd	r24, Z+1	; 0x01
 3aa:	84 ff       	sbrs	r24, 4
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <Config32MHzClock+0x56>
    
	DFLLRC2M.CTRL = DFLL_ENABLE_bm;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 68 00 	sts	0x0068, r24

	/////////////////////////////////////////////////////////////////
	// use PLL as systemclk
	CCP = CCP_IOREG_gc; /* allow changing CLK.CTRL */
 3b4:	88 ed       	ldi	r24, 0xD8	; 216
 3b6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc; // use PLL output as system clock 
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	80 93 40 00 	sts	0x0040, r24
 3be:	08 95       	ret

000003c0 <init>:
//################################################################################################
// hardware, funktionen und variablen initialisieren
//################################################################################################
void init(void)
{
	CLK.PSCTRL = 0x00;  // no division on peripheral clock
 3c0:	e0 e4       	ldi	r30, 0x40	; 64
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	11 82       	std	Z+1, r1	; 0x01

	//################################################################################################
    // Power reduction: Stop unused peripherals
	//################################################################################################
	PR.PRGEN = PR_AES_bm|PR_EBI_bm;												// Stop: AES, EBI
 3c6:	e0 e7       	ldi	r30, 0x70	; 112
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	88 e1       	ldi	r24, 0x18	; 24
 3cc:	80 83       	st	Z, r24
	PR.PRPA  =           PR_AC_bm|PR_DAC_bm;									// Stop: DAC, ADC, AC
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	81 83       	std	Z+1, r24	; 0x01
	PR.PRPB  =           PR_AC_bm|PR_DAC_bm;									// Stop: DAC, ADC, AC
 3d2:	82 83       	std	Z+2, r24	; 0x02
	PR.PRPC  = PR_TWI_bm|PR_USART1_bm                                   ;		// Stop: TWI, USART0, USART1, SPI, HIRES
 3d4:	80 e6       	ldi	r24, 0x60	; 96
 3d6:	83 83       	std	Z+3, r24	; 0x03
	PR.PRPD  = PR_TWI_bm|PR_USART1_bm|             PR_SPI_bm|PR_HIRES_bm;		// Stop: TWI, USART0, USART1, SPI, HIRES
 3d8:	8c e6       	ldi	r24, 0x6C	; 108
 3da:	84 83       	std	Z+4, r24	; 0x04
	PR.PRPE  = PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm            ;		// Stop: TWI, USART0, USART1, SPI, HIRES
 3dc:	88 e7       	ldi	r24, 0x78	; 120
 3de:	85 83       	std	Z+5, r24	; 0x05

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 3e0:	87 e0       	ldi	r24, 0x07	; 7
 3e2:	e0 ea       	ldi	r30, 0xA0	; 160
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	82 83       	std	Z+2, r24	; 0x02

	Config32MHzClock();
 3e8:	b4 df       	rcall	.-152    	; 0x352 <Config32MHzClock>
	
	usb_init();
 3ea:	c1 d0       	rcall	.+386    	; 0x56e <usb_init>

	sei();
 3ec:	78 94       	sei
 3ee:	08 95       	ret

000003f0 <main>:
{
	unsigned char res;
	//################################################################################################
	// initialisieren aller komponenten und variablen
	//################################################################################################
	init();
 3f0:	e7 df       	rcall	.-50     	; 0x3c0 <init>

	// sign for getting new data
	cdc_rxb.flag=1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 66 22 	sts	0x2266, r24
	cdc_rxb.len=0;
 3f8:	10 92 65 22 	sts	0x2265, r1
	cdc_rxb.bytes=0;
 3fc:	10 92 64 22 	sts	0x2264, r1

	cdc_txb.flag=0;
 400:	10 92 29 23 	sts	0x2329, r1
	cdc_txb.len=0;
 404:	10 92 28 23 	sts	0x2328, r1
	cdc_txb.bytes=0;
 408:	10 92 27 23 	sts	0x2327, r1
		EP_DEF_in(ep_out);
		EP_DEF_out(ep_in);
		EP_DEF_out(ep_note);

		// handle data if flag are cleared
		if(!cdc_rxb.flag)
 40c:	c6 e6       	ldi	r28, 0x66	; 102
 40e:	d2 e2       	ldi	r29, 0x22	; 34
		{
			if(cdc_rxb.bytes==cdc_rxb.len)
 410:	04 e6       	ldi	r16, 0x64	; 100
 412:	12 e2       	ldi	r17, 0x22	; 34
 414:	0f 2e       	mov	r0, r31
 416:	f5 e6       	ldi	r31, 0x65	; 101
 418:	cf 2e       	mov	r12, r31
 41a:	f2 e2       	ldi	r31, 0x22	; 34
 41c:	df 2e       	mov	r13, r31
 41e:	f0 2d       	mov	r31, r0
			}
			else
			{
				// process data
				res=cdc_rxb.data[cdc_rxb.bytes];
				cdc_txb.data[cdc_txb.bytes]=res;
 420:	0f 2e       	mov	r0, r31
 422:	f7 e2       	ldi	r31, 0x27	; 39
 424:	ef 2e       	mov	r14, r31
 426:	f3 e2       	ldi	r31, 0x23	; 35
 428:	ff 2e       	mov	r15, r31
 42a:	f0 2d       	mov	r31, r0
		{
			if(cdc_rxb.bytes==cdc_rxb.len)
			{
				// all data prcessed; send the data in txd and wait for new data
				// only if out-data are processed
				if(!cdc_txb.flag)
 42c:	0f 2e       	mov	r0, r31
 42e:	f9 e2       	ldi	r31, 0x29	; 41
 430:	af 2e       	mov	r10, r31
 432:	f3 e2       	ldi	r31, 0x23	; 35
 434:	bf 2e       	mov	r11, r31
 436:	f0 2d       	mov	r31, r0
				{
					cdc_txb.len=cdc_txb.bytes;
 438:	0f 2e       	mov	r0, r31
 43a:	f8 e2       	ldi	r31, 0x28	; 40
 43c:	8f 2e       	mov	r8, r31
 43e:	f3 e2       	ldi	r31, 0x23	; 35
 440:	9f 2e       	mov	r9, r31
 442:	f0 2d       	mov	r31, r0
					cdc_txb.flag=1;
 444:	77 24       	eor	r7, r7
 446:	73 94       	inc	r7

	while(1)
	{

		// manage usb-task for the endpoints (in loop)
		EP_DEF_in(ep_out);
 448:	89 e0       	ldi	r24, 0x09	; 9
 44a:	91 e2       	ldi	r25, 0x21	; 33
 44c:	74 d2       	rcall	.+1256   	; 0x936 <ep_def_in>
		EP_DEF_out(ep_in);
 44e:	82 e1       	ldi	r24, 0x12	; 18
 450:	91 e2       	ldi	r25, 0x21	; 33
 452:	ee d2       	rcall	.+1500   	; 0xa30 <ep_def_out>
		EP_DEF_out(ep_note);
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	91 e2       	ldi	r25, 0x21	; 33
 458:	eb d2       	rcall	.+1494   	; 0xa30 <ep_def_out>

		// handle data if flag are cleared
		if(!cdc_rxb.flag)
 45a:	88 81       	ld	r24, Y
 45c:	81 11       	cpse	r24, r1
 45e:	f4 cf       	rjmp	.-24     	; 0x448 <main+0x58>
		{
			if(cdc_rxb.bytes==cdc_rxb.len)
 460:	f8 01       	movw	r30, r16
 462:	80 81       	ld	r24, Z
 464:	f6 01       	movw	r30, r12
 466:	90 81       	ld	r25, Z
 468:	89 13       	cpse	r24, r25
 46a:	0c c0       	rjmp	.+24     	; 0x484 <main+0x94>
			{
				// all data prcessed; send the data in txd and wait for new data
				// only if out-data are processed
				if(!cdc_txb.flag)
 46c:	f5 01       	movw	r30, r10
 46e:	80 81       	ld	r24, Z
 470:	81 11       	cpse	r24, r1
 472:	ea cf       	rjmp	.-44     	; 0x448 <main+0x58>
				{
					cdc_txb.len=cdc_txb.bytes;
 474:	f7 01       	movw	r30, r14
 476:	80 81       	ld	r24, Z
 478:	f4 01       	movw	r30, r8
 47a:	80 83       	st	Z, r24
					cdc_txb.flag=1;
 47c:	f5 01       	movw	r30, r10
 47e:	70 82       	st	Z, r7
					cdc_rxb.flag=1;
 480:	78 82       	st	Y, r7
 482:	e2 cf       	rjmp	.-60     	; 0x448 <main+0x58>
			}
			else
			{
				// process data
				res=cdc_rxb.data[cdc_rxb.bytes];
				cdc_txb.data[cdc_txb.bytes]=res;
 484:	f7 01       	movw	r30, r14
 486:	90 81       	ld	r25, Z
 488:	e9 2f       	mov	r30, r25
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	e9 51       	subi	r30, 0x19	; 25
 48e:	fd 4d       	sbci	r31, 0xDD	; 221
				}
			}
			else
			{
				// process data
				res=cdc_rxb.data[cdc_rxb.bytes];
 490:	a8 2f       	mov	r26, r24
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	ac 5d       	subi	r26, 0xDC	; 220
 496:	bd 4d       	sbci	r27, 0xDD	; 221
				cdc_txb.data[cdc_txb.bytes]=res;
 498:	2c 91       	ld	r18, X
 49a:	20 83       	st	Z, r18
				// process here the data (res)
				// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				cdc_rxb.bytes+=1;
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	f8 01       	movw	r30, r16
 4a0:	80 83       	st	Z, r24
				cdc_txb.bytes+=1;
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	f7 01       	movw	r30, r14
 4a6:	90 83       	st	Z, r25
 4a8:	cf cf       	rjmp	.-98     	; 0x448 <main+0x58>

000004aa <usb_handle_ring_note>:
{
//	usb_notify_state=EP_NOTE_CLR_DCD;
}

void usb_cdc_dcd_off(void)
{
 4aa:	fc 01       	movw	r30, r24
 4ac:	80 91 22 21 	lds	r24, 0x2122
 4b0:	88 23       	and	r24, r24
 4b2:	41 f1       	breq	.+80     	; 0x504 <usb_handle_ring_note+0x5a>
 4b4:	80 91 22 21 	lds	r24, 0x2122
 4b8:	88 23       	and	r24, r24
 4ba:	a4 f0       	brlt	.+40     	; 0x4e4 <usb_handle_ring_note+0x3a>
 4bc:	81 ea       	ldi	r24, 0xA1	; 161
 4be:	80 83       	st	Z, r24
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	81 83       	std	Z+1, r24	; 0x01
 4c4:	12 82       	std	Z+2, r1	; 0x02
 4c6:	13 82       	std	Z+3, r1	; 0x03
 4c8:	14 82       	std	Z+4, r1	; 0x04
 4ca:	15 82       	std	Z+5, r1	; 0x05
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	86 83       	std	Z+6, r24	; 0x06
 4d2:	97 83       	std	Z+7, r25	; 0x07
 4d4:	80 91 22 21 	lds	r24, 0x2122
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	80 93 22 21 	sts	0x2122, r24
 4de:	88 e0       	ldi	r24, 0x08	; 8
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	08 95       	ret
 4e4:	80 91 22 21 	lds	r24, 0x2122
 4e8:	81 38       	cpi	r24, 0x81	; 129
 4ea:	29 f4       	brne	.+10     	; 0x4f6 <usb_handle_ring_note+0x4c>
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	80 83       	st	Z, r24
 4f2:	91 83       	std	Z+1, r25	; 0x01
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <usb_handle_ring_note+0x50>
 4f6:	10 82       	st	Z, r1
 4f8:	11 82       	std	Z+1, r1	; 0x01
 4fa:	10 92 22 21 	sts	0x2122, r1
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	08 95       	ret

0000050a <usb_handle_ring_rx>:
 50a:	cf 93       	push	r28
 50c:	c6 2f       	mov	r28, r22
 50e:	20 91 66 22 	lds	r18, 0x2266
 512:	22 23       	and	r18, r18
 514:	79 f0       	breq	.+30     	; 0x534 <usb_handle_ring_rx+0x2a>
 516:	46 2f       	mov	r20, r22
 518:	57 2f       	mov	r21, r23
 51a:	bc 01       	movw	r22, r24
 51c:	84 e2       	ldi	r24, 0x24	; 36
 51e:	92 e2       	ldi	r25, 0x22	; 34
 520:	5a d5       	rcall	.+2740   	; 0xfd6 <memcpy>
 522:	c0 93 65 22 	sts	0x2265, r28
 526:	10 92 64 22 	sts	0x2264, r1
 52a:	10 92 66 22 	sts	0x2266, r1
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <usb_handle_ring_rx+0x2e>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <usb_handle_ring_tx>:
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	20 91 29 23 	lds	r18, 0x2329
 544:	22 23       	and	r18, r18
 546:	71 f0       	breq	.+28     	; 0x564 <usb_handle_ring_tx+0x28>
 548:	c8 e2       	ldi	r28, 0x28	; 40
 54a:	d3 e2       	ldi	r29, 0x23	; 35
 54c:	48 81       	ld	r20, Y
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	67 ee       	ldi	r22, 0xE7	; 231
 552:	72 e2       	ldi	r23, 0x22	; 34
 554:	40 d5       	rcall	.+2688   	; 0xfd6 <memcpy>
 556:	88 81       	ld	r24, Y
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	10 92 27 23 	sts	0x2327, r1
 55e:	10 92 29 23 	sts	0x2329, r1
 562:	02 c0       	rjmp	.+4      	; 0x568 <usb_handle_ring_tx+0x2c>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <usb_init>:
///////////////////////////////////////////////////////////////////////////////////////
// initialize the usb_cdc
///////////////////////////////////////////////////////////////////////////////////////
void usb_init(void)
{
	cdc_rxb.flag=0;
 56e:	10 92 66 22 	sts	0x2266, r1
	cdc_rxb.len=0;
 572:	10 92 65 22 	sts	0x2265, r1
	cdc_rxb.bytes=0;
 576:	10 92 64 22 	sts	0x2264, r1

	cdc_txb.flag=0;
 57a:	10 92 29 23 	sts	0x2329, r1
	cdc_txb.len=0;
 57e:	10 92 28 23 	sts	0x2328, r1
	cdc_txb.bytes=0;
 582:	10 92 27 23 	sts	0x2327, r1

#ifdef USB_DEF_CONFIG_CLK
	USB_ConfigureClock();
#endif

	EP_DEF_init_buffer(ep_in);
 586:	82 e1       	ldi	r24, 0x12	; 18
 588:	91 e2       	ldi	r25, 0x21	; 33
 58a:	a7 d0       	rcall	.+334    	; 0x6da <ep_def_init_buffer>
	EP_DEF_init_buffer(ep_out);
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	91 e2       	ldi	r25, 0x21	; 33
 590:	a4 d0       	rcall	.+328    	; 0x6da <ep_def_init_buffer>
	EP_DEF_init_buffer(ep_note);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	91 e2       	ldi	r25, 0x21	; 33
 596:	a1 d0       	rcall	.+322    	; 0x6da <ep_def_init_buffer>

	// Enable USB interrupts
//	USB.INTCTRLA = /*USB_SOFIE_bm |*/ USB_BUSEVIE_bm | USB_INTLVL_MED_gc;
	USB.INTCTRLA = /*USB_SOFIE_bm |*/ USB_BUSEVIE_bm | USB_INTLVL_HI_gc;
 598:	e0 ec       	ldi	r30, 0xC0	; 192
 59a:	f4 e0       	ldi	r31, 0x04	; 4
 59c:	83 e4       	ldi	r24, 0x43	; 67
 59e:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB = USB_TRNIE_bm | USB_SETUPIE_bm;
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	81 87       	std	Z+9, r24	; 0x09

	USB_xm_Init();
 5a4:	ee c2       	rjmp	.+1500   	; 0xb82 <USB_xm_Init>
 5a6:	08 95       	ret

000005a8 <EVENT_USB_Device_SetInterface>:
// if device set interface
///////////////////////////////////////////////////////////////////////////////////////
bool EVENT_USB_Device_SetInterface(uint8_t interface, uint8_t altsetting)
{
	return false;
}
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret

000005ac <EVENT_USB_Device_ConfigurationChanged>:
///////////////////////////////////////////////////////////////////////////////////////
// if Configuration is changed this is set
///////////////////////////////////////////////////////////////////////////////////////
void EVENT_USB_Device_ConfigurationChanged(uint8_t config)
{
	EP_DEF_init(ep_in);
 5ac:	82 e1       	ldi	r24, 0x12	; 18
 5ae:	91 e2       	ldi	r25, 0x21	; 33
 5b0:	d0 d0       	rcall	.+416    	; 0x752 <ep_def_init>
	EP_DEF_init(ep_out);
 5b2:	89 e0       	ldi	r24, 0x09	; 9
 5b4:	91 e2       	ldi	r25, 0x21	; 33
 5b6:	cd d0       	rcall	.+410    	; 0x752 <ep_def_init>
	EP_DEF_init(ep_note);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	91 e2       	ldi	r25, 0x21	; 33
 5bc:	ca c0       	rjmp	.+404    	; 0x752 <ep_def_init>
 5be:	08 95       	ret

000005c0 <EVENT_USB_Device_Suspend>:

///////////////////////////////////////////////////////////////////////////////////////
// if device suspend
///////////////////////////////////////////////////////////////////////////////////////
void EVENT_USB_Device_Suspend(void)
{
 5c0:	08 95       	ret

000005c2 <EVENT_USB_Device_WakeUp>:

///////////////////////////////////////////////////////////////////////////////////////
// if device resume
///////////////////////////////////////////////////////////////////////////////////////
void EVENT_USB_Device_WakeUp(void)
{
 5c2:	08 95       	ret

000005c4 <EVENT_USB_Device_Reset>:

///////////////////////////////////////////////////////////////////////////////////////
// if device reset
///////////////////////////////////////////////////////////////////////////////////////
void EVENT_USB_Device_Reset(void)
{
 5c4:	08 95       	ret

000005c6 <EVENT_USB_Device_ControlOUT>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void EVENT_USB_Device_ControlOUT(uint8_t* data, uint8_t len)
{
	if(len)
 5c6:	66 23       	and	r22, r22
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <EVENT_USB_Device_ControlOUT+0x1c>
	{
		switch(usb_stored_control)
 5ca:	20 91 23 21 	lds	r18, 0x2123
 5ce:	20 32       	cpi	r18, 0x20	; 32
 5d0:	41 f4       	brne	.+16     	; 0x5e2 <EVENT_USB_Device_ControlOUT+0x1c>
		{
			case CDC_REQ_SetLineEncoding:
				/* Read the line coding data in from the host into the global struct */
				memcpy(&LineEncoding,data,sizeof(CDC_LineEncoding_t));
 5d2:	27 e0       	ldi	r18, 0x07	; 7
 5d4:	fc 01       	movw	r30, r24
 5d6:	ab e1       	ldi	r26, 0x1B	; 27
 5d8:	b1 e2       	ldi	r27, 0x21	; 33
 5da:	01 90       	ld	r0, Z+
 5dc:	0d 92       	st	X+, r0
 5de:	2a 95       	dec	r18
 5e0:	e1 f7       	brne	.-8      	; 0x5da <EVENT_USB_Device_ControlOUT+0x14>
 5e2:	08 95       	ret

000005e4 <EVENT_USB_Device_ControlRequest>:
///////////////////////////////////////////////////////////////////////////////////////
// evnt for Control Request
///////////////////////////////////////////////////////////////////////////////////////
/** Event handler for the library USB Control Request reception event. */
bool EVENT_USB_Device_ControlRequest(USB_Request_Header_t* req)
{
 5e4:	0f 93       	push	r16
	USB_EP_pair_t* pair = &endpoints[0];
	USB_EP_t* e = &pair->ep[1];
	USB_EP_t* b = &pair->ep[1];

	/* Process CDC specific control requests */
	switch (req->bRequest)
 5e6:	fc 01       	movw	r30, r24
 5e8:	21 81       	ldd	r18, Z+1	; 0x01
 5ea:	21 32       	cpi	r18, 0x21	; 33
 5ec:	59 f0       	breq	.+22     	; 0x604 <EVENT_USB_Device_ControlRequest+0x20>
 5ee:	18 f4       	brcc	.+6      	; 0x5f6 <EVENT_USB_Device_ControlRequest+0x12>
 5f0:	20 32       	cpi	r18, 0x20	; 32
 5f2:	41 f1       	breq	.+80     	; 0x644 <EVENT_USB_Device_ControlRequest+0x60>
 5f4:	67 c0       	rjmp	.+206    	; 0x6c4 <EVENT_USB_Device_ControlRequest+0xe0>
 5f6:	22 32       	cpi	r18, 0x22	; 34
 5f8:	09 f4       	brne	.+2      	; 0x5fc <EVENT_USB_Device_ControlRequest+0x18>
 5fa:	3c c0       	rjmp	.+120    	; 0x674 <EVENT_USB_Device_ControlRequest+0x90>
 5fc:	23 32       	cpi	r18, 0x23	; 35
 5fe:	09 f4       	brne	.+2      	; 0x602 <EVENT_USB_Device_ControlRequest+0x1e>
 600:	4d c0       	rjmp	.+154    	; 0x69c <EVENT_USB_Device_ControlRequest+0xb8>
 602:	60 c0       	rjmp	.+192    	; 0x6c4 <EVENT_USB_Device_ControlRequest+0xe0>
	{
		case CDC_REQ_GetLineEncoding:
			if (req->bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	81 3a       	cpi	r24, 0xA1	; 161
 60a:	09 f0       	breq	.+2      	; 0x60e <EVENT_USB_Device_ControlRequest+0x2a>
 60c:	5d c0       	rjmp	.+186    	; 0x6c8 <EVENT_USB_Device_ControlRequest+0xe4>
			{

				/* Write the line coding data to the control endpoint */
				memcpy(ep0_buf_in,(char *)&LineEncoding,sizeof(CDC_LineEncoding_t));
 60e:	87 e0       	ldi	r24, 0x07	; 7
 610:	eb e1       	ldi	r30, 0x1B	; 27
 612:	f1 e2       	ldi	r31, 0x21	; 33
 614:	aa e2       	ldi	r26, 0x2A	; 42
 616:	b3 e2       	ldi	r27, 0x23	; 35
 618:	01 90       	ld	r0, Z+
 61a:	0d 92       	st	X+, r0
 61c:	8a 95       	dec	r24
 61e:	e1 f7       	brne	.-8      	; 0x618 <EVENT_USB_Device_ControlRequest+0x34>
				// send ep 0
				b->DATAPTR = (unsigned) ep0_buf_in;
 620:	8a e2       	ldi	r24, 0x2A	; 42
 622:	93 e2       	ldi	r25, 0x23	; 35
 624:	80 93 0c 20 	sts	0x200C, r24
 628:	90 93 0d 20 	sts	0x200D, r25
				b->CNT = sizeof(CDC_LineEncoding_t);
 62c:	87 e0       	ldi	r24, 0x07	; 7
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	80 93 0a 20 	sts	0x200A, r24
 634:	90 93 0b 20 	sts	0x200B, r25
				LACR16(&(e->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 638:	e8 e0       	ldi	r30, 0x08	; 8
 63a:	f0 e2       	ldi	r31, 0x20	; 32
 63c:	02 e2       	ldi	r16, 0x22	; 34
 63e:	06 93       	lac	Z, r16
				return true;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	49 c0       	rjmp	.+146    	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
			}
			break;

		case CDC_REQ_SetLineEncoding:
			if (req->bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
 648:	81 32       	cpi	r24, 0x21	; 33
 64a:	09 f0       	breq	.+2      	; 0x64e <EVENT_USB_Device_ControlRequest+0x6a>
 64c:	3f c0       	rjmp	.+126    	; 0x6cc <EVENT_USB_Device_ControlRequest+0xe8>
			{
				usb_stored_control=CDC_REQ_SetLineEncoding;
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	80 93 23 21 	sts	0x2123, r24
				/* Read the line coding data in from the host into the global struct */
				// send ep 0
				b->DATAPTR = (unsigned) ep0_buf_in;
 654:	8a e2       	ldi	r24, 0x2A	; 42
 656:	93 e2       	ldi	r25, 0x23	; 35
 658:	80 93 0c 20 	sts	0x200C, r24
 65c:	90 93 0d 20 	sts	0x200D, r25
				b->CNT = 0;
 660:	10 92 0a 20 	sts	0x200A, r1
 664:	10 92 0b 20 	sts	0x200B, r1
				LACR16(&(e->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 668:	e8 e0       	ldi	r30, 0x08	; 8
 66a:	f0 e2       	ldi	r31, 0x20	; 32
 66c:	02 e2       	ldi	r16, 0x22	; 34
 66e:	06 93       	lac	Z, r16
				return true;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	31 c0       	rjmp	.+98     	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (req->bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	81 32       	cpi	r24, 0x21	; 33
 67a:	51 f5       	brne	.+84     	; 0x6d0 <EVENT_USB_Device_ControlRequest+0xec>
			{
				// send ep 0
				b->DATAPTR = (unsigned) ep0_buf_in;
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	93 e2       	ldi	r25, 0x23	; 35
 680:	80 93 0c 20 	sts	0x200C, r24
 684:	90 93 0d 20 	sts	0x200D, r25
				b->CNT = 0;
 688:	10 92 0a 20 	sts	0x200A, r1
 68c:	10 92 0b 20 	sts	0x200B, r1
				LACR16(&(e->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 690:	e8 e0       	ldi	r30, 0x08	; 8
 692:	f0 e2       	ldi	r31, 0x20	; 32
 694:	02 e2       	ldi	r16, 0x22	; 34
 696:	06 93       	lac	Z, r16

				return true;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	1d c0       	rjmp	.+58     	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
			}
			break;

		case CDC_REQ_SendBreak:
			if (req->bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 69c:	fc 01       	movw	r30, r24
 69e:	80 81       	ld	r24, Z
 6a0:	81 32       	cpi	r24, 0x21	; 33
 6a2:	c1 f4       	brne	.+48     	; 0x6d4 <EVENT_USB_Device_ControlRequest+0xf0>
			{
//				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
				// send ep 0
				b->DATAPTR = (unsigned) ep0_buf_in;
 6a4:	8a e2       	ldi	r24, 0x2A	; 42
 6a6:	93 e2       	ldi	r25, 0x23	; 35
 6a8:	80 93 0c 20 	sts	0x200C, r24
 6ac:	90 93 0d 20 	sts	0x200D, r25
				b->CNT = 0;
 6b0:	10 92 0a 20 	sts	0x200A, r1
 6b4:	10 92 0b 20 	sts	0x200B, r1
				LACR16(&(e->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 6b8:	e8 e0       	ldi	r30, 0x08	; 8
 6ba:	f0 e2       	ldi	r31, 0x20	; 32
 6bc:	02 e2       	ldi	r16, 0x22	; 34
 6be:	06 93       	lac	Z, r16
				return true;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
//		if (req->bRequest == 0xBB)
//		{
//			USB_enter_bootloader();
//		}
//	}
	return false;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xf2>
 6d4:	80 e0       	ldi	r24, 0x00	; 0
}
 6d6:	0f 91       	pop	r16
 6d8:	08 95       	ret

000006da <ep_def_init_buffer>:

///////////////////////////////////////////////////////////////////////////////////////
// endpoint-functions
///////////////////////////////////////////////////////////////////////////////////////
void ep_def_init_buffer(EP_data *p)
{
 6da:	fc 01       	movw	r30, r24
	if(p->ep&USB_EP_PP)
 6dc:	a0 81       	ld	r26, Z
 6de:	a6 ff       	sbrs	r26, 6
 6e0:	1e c0       	rjmp	.+60     	; 0x71e <ep_def_init_buffer+0x44>
	{
		endpoints[p->ep&0x0f].in.DATAPTR=(unsigned int)p->buf;
 6e2:	af 70       	andi	r26, 0x0F	; 15
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	94 81       	ldd	r25, Z+4	; 0x04
 6e8:	20 e1       	ldi	r18, 0x10	; 16
 6ea:	a2 9f       	mul	r26, r18
 6ec:	d0 01       	movw	r26, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	a0 50       	subi	r26, 0x00	; 0
 6f2:	b0 4e       	sbci	r27, 0xE0	; 224
 6f4:	1c 96       	adiw	r26, 0x0c	; 12
 6f6:	8d 93       	st	X+, r24
 6f8:	9c 93       	st	X, r25
 6fa:	1d 97       	sbiw	r26, 0x0d	; 13
		endpoints[p->ep&0x0f].out.DATAPTR=((unsigned int)p->buf)+p->len;
 6fc:	40 81       	ld	r20, Z
 6fe:	4f 70       	andi	r20, 0x0F	; 15
 700:	23 81       	ldd	r18, Z+3	; 0x03
 702:	34 81       	ldd	r19, Z+4	; 0x04
 704:	85 81       	ldd	r24, Z+5	; 0x05
 706:	96 81       	ldd	r25, Z+6	; 0x06
 708:	82 0f       	add	r24, r18
 70a:	93 1f       	adc	r25, r19
 70c:	20 e1       	ldi	r18, 0x10	; 16
 70e:	42 9f       	mul	r20, r18
 710:	f0 01       	movw	r30, r0
 712:	11 24       	eor	r1, r1
 714:	e0 50       	subi	r30, 0x00	; 0
 716:	f0 4e       	sbci	r31, 0xE0	; 224
 718:	84 83       	std	Z+4, r24	; 0x04
 71a:	95 83       	std	Z+5, r25	; 0x05
 71c:	08 95       	ret
	}
	else
	{
		if(p->ep&ENDPOINT_DIR_MASK)
 71e:	aa 23       	and	r26, r26
 720:	64 f4       	brge	.+24     	; 0x73a <ep_def_init_buffer+0x60>
		{
			endpoints[p->ep&0x0f].in.DATAPTR=(unsigned int)p->buf;
 722:	af 70       	andi	r26, 0x0F	; 15
 724:	83 81       	ldd	r24, Z+3	; 0x03
 726:	94 81       	ldd	r25, Z+4	; 0x04
 728:	20 e1       	ldi	r18, 0x10	; 16
 72a:	a2 9f       	mul	r26, r18
 72c:	f0 01       	movw	r30, r0
 72e:	11 24       	eor	r1, r1
 730:	e0 50       	subi	r30, 0x00	; 0
 732:	f0 4e       	sbci	r31, 0xE0	; 224
 734:	84 87       	std	Z+12, r24	; 0x0c
 736:	95 87       	std	Z+13, r25	; 0x0d
 738:	08 95       	ret
		}
		else
		{
			endpoints[p->ep&0x0f].out.DATAPTR=(unsigned int)p->buf;
 73a:	af 70       	andi	r26, 0x0F	; 15
 73c:	83 81       	ldd	r24, Z+3	; 0x03
 73e:	94 81       	ldd	r25, Z+4	; 0x04
 740:	20 e1       	ldi	r18, 0x10	; 16
 742:	a2 9f       	mul	r26, r18
 744:	f0 01       	movw	r30, r0
 746:	11 24       	eor	r1, r1
 748:	e0 50       	subi	r30, 0x00	; 0
 74a:	f0 4e       	sbci	r31, 0xE0	; 224
 74c:	84 83       	std	Z+4, r24	; 0x04
 74e:	95 83       	std	Z+5, r25	; 0x05
 750:	08 95       	ret

00000752 <ep_def_init>:
		}
	}
}

void ep_def_init(EP_data *p)
{
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
	USB_EP_t *c,*b;

	ep_def_init_buffer(p);
 758:	c0 df       	rcall	.-128    	; 0x6da <ep_def_init_buffer>
	p->bank=0;
 75a:	1a 82       	std	Y+2, r1	; 0x02

	c=&endpoints[p->ep&0x0f].in;
 75c:	88 81       	ld	r24, Y
 75e:	e8 2f       	mov	r30, r24
 760:	ef 70       	andi	r30, 0x0F	; 15
 762:	30 e1       	ldi	r19, 0x10	; 16
 764:	e3 9f       	mul	r30, r19
 766:	f0 01       	movw	r30, r0
 768:	11 24       	eor	r1, r1
 76a:	df 01       	movw	r26, r30
 76c:	a8 5f       	subi	r26, 0xF8	; 248
 76e:	bf 4d       	sbci	r27, 0xDF	; 223
	b=&endpoints[p->ep&0x0f].out;
 770:	e0 50       	subi	r30, 0x00	; 0
 772:	f0 4e       	sbci	r31, 0xE0	; 224

	if(p->ep&USB_EP_PP)
 774:	86 ff       	sbrs	r24, 6
 776:	77 c0       	rjmp	.+238    	; 0x866 <ep_def_init+0x114>
	{
		if(p->ep&ENDPOINT_DIR_MASK)
 778:	88 23       	and	r24, r24
 77a:	e4 f5       	brge	.+120    	; 0x7f4 <ep_def_init+0xa2>
		{
			c->CTRL=0;
 77c:	11 96       	adiw	r26, 0x01	; 1
 77e:	1c 92       	st	X, r1
 780:	11 97       	sbiw	r26, 0x01	; 1
			c->CNT=0;
 782:	12 96       	adiw	r26, 0x02	; 2
 784:	1d 92       	st	X+, r1
 786:	1c 92       	st	X, r1
 788:	13 97       	sbiw	r26, 0x03	; 3
			c->STATUS=USB_EP_BUSNACK0_bm | USB_EP_BUSNACK1_bm;
 78a:	86 e0       	ldi	r24, 0x06	; 6
 78c:	8c 93       	st	X, r24
			c->CTRL=p->type| USB_EP_size_to_gc(p->len) | USB_EP_PINGPONG_bm;
 78e:	29 81       	ldd	r18, Y+1	; 0x01
 790:	8d 81       	ldd	r24, Y+5	; 0x05
 792:	9e 81       	ldd	r25, Y+6	; 0x06
 794:	89 30       	cpi	r24, 0x09	; 9
 796:	91 05       	cpc	r25, r1
 798:	a8 f0       	brcs	.+42     	; 0x7c4 <ep_def_init+0x72>
 79a:	81 31       	cpi	r24, 0x11	; 17
 79c:	91 05       	cpc	r25, r1
 79e:	a0 f0       	brcs	.+40     	; 0x7c8 <ep_def_init+0x76>
 7a0:	81 32       	cpi	r24, 0x21	; 33
 7a2:	91 05       	cpc	r25, r1
 7a4:	98 f0       	brcs	.+38     	; 0x7cc <ep_def_init+0x7a>
 7a6:	81 34       	cpi	r24, 0x41	; 65
 7a8:	91 05       	cpc	r25, r1
 7aa:	90 f0       	brcs	.+36     	; 0x7d0 <ep_def_init+0x7e>
 7ac:	81 38       	cpi	r24, 0x81	; 129
 7ae:	91 05       	cpc	r25, r1
 7b0:	88 f0       	brcs	.+34     	; 0x7d4 <ep_def_init+0x82>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	31 e0       	ldi	r19, 0x01	; 1
 7b6:	93 07       	cpc	r25, r19
 7b8:	78 f0       	brcs	.+30     	; 0x7d8 <ep_def_init+0x86>
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	92 40       	sbci	r25, 0x02	; 2
 7be:	70 f4       	brcc	.+28     	; 0x7dc <ep_def_init+0x8a>
 7c0:	96 e0       	ldi	r25, 0x06	; 6
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <ep_def_init+0x8c>
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0b c0       	rjmp	.+22     	; 0x7de <ep_def_init+0x8c>
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <ep_def_init+0x8c>
 7cc:	92 e0       	ldi	r25, 0x02	; 2
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <ep_def_init+0x8c>
 7d0:	93 e0       	ldi	r25, 0x03	; 3
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <ep_def_init+0x8c>
 7d4:	94 e0       	ldi	r25, 0x04	; 4
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <ep_def_init+0x8c>
 7d8:	95 e0       	ldi	r25, 0x05	; 5
 7da:	01 c0       	rjmp	.+2      	; 0x7de <ep_def_init+0x8c>
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	82 2f       	mov	r24, r18
 7e0:	80 61       	ori	r24, 0x10	; 16
 7e2:	89 2b       	or	r24, r25
 7e4:	11 96       	adiw	r26, 0x01	; 1
 7e6:	8c 93       	st	X, r24
			b->CNT=0;
 7e8:	12 82       	std	Z+2, r1	; 0x02
 7ea:	13 82       	std	Z+3, r1	; 0x03
			b->CTRL=0;
 7ec:	11 82       	std	Z+1, r1	; 0x01
			b->STATUS=USB_EP_BUSNACK0_bm;
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	80 83       	st	Z, r24
 7f2:	9e c0       	rjmp	.+316    	; 0x930 <ep_def_init+0x1de>
		}
		else
		{
			b->CTRL=0;
 7f4:	11 82       	std	Z+1, r1	; 0x01
			b->CNT=0;
 7f6:	12 82       	std	Z+2, r1	; 0x02
 7f8:	13 82       	std	Z+3, r1	; 0x03
			b->STATUS=0;
 7fa:	10 82       	st	Z, r1
			b->CTRL=p->type| USB_EP_size_to_gc(p->len) | USB_EP_PINGPONG_bm;
 7fc:	29 81       	ldd	r18, Y+1	; 0x01
 7fe:	8d 81       	ldd	r24, Y+5	; 0x05
 800:	9e 81       	ldd	r25, Y+6	; 0x06
 802:	89 30       	cpi	r24, 0x09	; 9
 804:	91 05       	cpc	r25, r1
 806:	a8 f0       	brcs	.+42     	; 0x832 <ep_def_init+0xe0>
 808:	81 31       	cpi	r24, 0x11	; 17
 80a:	91 05       	cpc	r25, r1
 80c:	a0 f0       	brcs	.+40     	; 0x836 <ep_def_init+0xe4>
 80e:	81 32       	cpi	r24, 0x21	; 33
 810:	91 05       	cpc	r25, r1
 812:	98 f0       	brcs	.+38     	; 0x83a <ep_def_init+0xe8>
 814:	81 34       	cpi	r24, 0x41	; 65
 816:	91 05       	cpc	r25, r1
 818:	90 f0       	brcs	.+36     	; 0x83e <ep_def_init+0xec>
 81a:	81 38       	cpi	r24, 0x81	; 129
 81c:	91 05       	cpc	r25, r1
 81e:	88 f0       	brcs	.+34     	; 0x842 <ep_def_init+0xf0>
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	31 e0       	ldi	r19, 0x01	; 1
 824:	93 07       	cpc	r25, r19
 826:	78 f0       	brcs	.+30     	; 0x846 <ep_def_init+0xf4>
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	92 40       	sbci	r25, 0x02	; 2
 82c:	70 f4       	brcc	.+28     	; 0x84a <ep_def_init+0xf8>
 82e:	96 e0       	ldi	r25, 0x06	; 6
 830:	0d c0       	rjmp	.+26     	; 0x84c <ep_def_init+0xfa>
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0b c0       	rjmp	.+22     	; 0x84c <ep_def_init+0xfa>
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	09 c0       	rjmp	.+18     	; 0x84c <ep_def_init+0xfa>
 83a:	92 e0       	ldi	r25, 0x02	; 2
 83c:	07 c0       	rjmp	.+14     	; 0x84c <ep_def_init+0xfa>
 83e:	93 e0       	ldi	r25, 0x03	; 3
 840:	05 c0       	rjmp	.+10     	; 0x84c <ep_def_init+0xfa>
 842:	94 e0       	ldi	r25, 0x04	; 4
 844:	03 c0       	rjmp	.+6      	; 0x84c <ep_def_init+0xfa>
 846:	95 e0       	ldi	r25, 0x05	; 5
 848:	01 c0       	rjmp	.+2      	; 0x84c <ep_def_init+0xfa>
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	82 2f       	mov	r24, r18
 84e:	80 61       	ori	r24, 0x10	; 16
 850:	89 2b       	or	r24, r25
 852:	81 83       	std	Z+1, r24	; 0x01
			c->CNT=0;
 854:	12 96       	adiw	r26, 0x02	; 2
 856:	1d 92       	st	X+, r1
 858:	1c 92       	st	X, r1
 85a:	13 97       	sbiw	r26, 0x03	; 3
			c->CTRL=0;
 85c:	11 96       	adiw	r26, 0x01	; 1
 85e:	1c 92       	st	X, r1
 860:	11 97       	sbiw	r26, 0x01	; 1
			c->STATUS=0;
 862:	1c 92       	st	X, r1
 864:	65 c0       	rjmp	.+202    	; 0x930 <ep_def_init+0x1de>
		}
	}
	else
	{
		if(p->ep&ENDPOINT_DIR_MASK)
 866:	88 23       	and	r24, r24
 868:	ac f5       	brge	.+106    	; 0x8d4 <ep_def_init+0x182>
		{
			c->CTRL=0;
 86a:	11 96       	adiw	r26, 0x01	; 1
 86c:	1c 92       	st	X, r1
 86e:	11 97       	sbiw	r26, 0x01	; 1
			c->CNT=0;
 870:	12 96       	adiw	r26, 0x02	; 2
 872:	1d 92       	st	X+, r1
 874:	1c 92       	st	X, r1
 876:	13 97       	sbiw	r26, 0x03	; 3
			c->STATUS=USB_EP_BUSNACK0_bm | USB_EP_BUSNACK1_bm;
 878:	86 e0       	ldi	r24, 0x06	; 6
 87a:	8c 93       	st	X, r24
			c->CTRL=p->type| USB_EP_size_to_gc(p->len);
 87c:	29 81       	ldd	r18, Y+1	; 0x01
 87e:	8d 81       	ldd	r24, Y+5	; 0x05
 880:	9e 81       	ldd	r25, Y+6	; 0x06
 882:	89 30       	cpi	r24, 0x09	; 9
 884:	91 05       	cpc	r25, r1
 886:	a8 f0       	brcs	.+42     	; 0x8b2 <ep_def_init+0x160>
 888:	81 31       	cpi	r24, 0x11	; 17
 88a:	91 05       	cpc	r25, r1
 88c:	a0 f0       	brcs	.+40     	; 0x8b6 <ep_def_init+0x164>
 88e:	81 32       	cpi	r24, 0x21	; 33
 890:	91 05       	cpc	r25, r1
 892:	98 f0       	brcs	.+38     	; 0x8ba <ep_def_init+0x168>
 894:	81 34       	cpi	r24, 0x41	; 65
 896:	91 05       	cpc	r25, r1
 898:	90 f0       	brcs	.+36     	; 0x8be <ep_def_init+0x16c>
 89a:	81 38       	cpi	r24, 0x81	; 129
 89c:	91 05       	cpc	r25, r1
 89e:	88 f0       	brcs	.+34     	; 0x8c2 <ep_def_init+0x170>
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	31 e0       	ldi	r19, 0x01	; 1
 8a4:	93 07       	cpc	r25, r19
 8a6:	78 f0       	brcs	.+30     	; 0x8c6 <ep_def_init+0x174>
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	92 40       	sbci	r25, 0x02	; 2
 8ac:	70 f4       	brcc	.+28     	; 0x8ca <ep_def_init+0x178>
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <ep_def_init+0x17a>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0b c0       	rjmp	.+22     	; 0x8cc <ep_def_init+0x17a>
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <ep_def_init+0x17a>
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	07 c0       	rjmp	.+14     	; 0x8cc <ep_def_init+0x17a>
 8be:	83 e0       	ldi	r24, 0x03	; 3
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <ep_def_init+0x17a>
 8c2:	84 e0       	ldi	r24, 0x04	; 4
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <ep_def_init+0x17a>
 8c6:	85 e0       	ldi	r24, 0x05	; 5
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <ep_def_init+0x17a>
 8ca:	87 e0       	ldi	r24, 0x07	; 7
 8cc:	82 2b       	or	r24, r18
 8ce:	11 96       	adiw	r26, 0x01	; 1
 8d0:	8c 93       	st	X, r24
 8d2:	2e c0       	rjmp	.+92     	; 0x930 <ep_def_init+0x1de>
		}
		else
		{
			b->CTRL=0;
 8d4:	11 82       	std	Z+1, r1	; 0x01
			b->CNT=0;
 8d6:	12 82       	std	Z+2, r1	; 0x02
 8d8:	13 82       	std	Z+3, r1	; 0x03
			b->STATUS=0;
 8da:	10 82       	st	Z, r1
			b->CTRL=p->type| USB_EP_size_to_gc(p->len);
 8dc:	29 81       	ldd	r18, Y+1	; 0x01
 8de:	8d 81       	ldd	r24, Y+5	; 0x05
 8e0:	9e 81       	ldd	r25, Y+6	; 0x06
 8e2:	89 30       	cpi	r24, 0x09	; 9
 8e4:	91 05       	cpc	r25, r1
 8e6:	a8 f0       	brcs	.+42     	; 0x912 <ep_def_init+0x1c0>
 8e8:	81 31       	cpi	r24, 0x11	; 17
 8ea:	91 05       	cpc	r25, r1
 8ec:	a0 f0       	brcs	.+40     	; 0x916 <ep_def_init+0x1c4>
 8ee:	81 32       	cpi	r24, 0x21	; 33
 8f0:	91 05       	cpc	r25, r1
 8f2:	98 f0       	brcs	.+38     	; 0x91a <ep_def_init+0x1c8>
 8f4:	81 34       	cpi	r24, 0x41	; 65
 8f6:	91 05       	cpc	r25, r1
 8f8:	90 f0       	brcs	.+36     	; 0x91e <ep_def_init+0x1cc>
 8fa:	81 38       	cpi	r24, 0x81	; 129
 8fc:	91 05       	cpc	r25, r1
 8fe:	88 f0       	brcs	.+34     	; 0x922 <ep_def_init+0x1d0>
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	31 e0       	ldi	r19, 0x01	; 1
 904:	93 07       	cpc	r25, r19
 906:	78 f0       	brcs	.+30     	; 0x926 <ep_def_init+0x1d4>
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	92 40       	sbci	r25, 0x02	; 2
 90c:	70 f4       	brcc	.+28     	; 0x92a <ep_def_init+0x1d8>
 90e:	86 e0       	ldi	r24, 0x06	; 6
 910:	0d c0       	rjmp	.+26     	; 0x92c <ep_def_init+0x1da>
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	0b c0       	rjmp	.+22     	; 0x92c <ep_def_init+0x1da>
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	09 c0       	rjmp	.+18     	; 0x92c <ep_def_init+0x1da>
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	07 c0       	rjmp	.+14     	; 0x92c <ep_def_init+0x1da>
 91e:	83 e0       	ldi	r24, 0x03	; 3
 920:	05 c0       	rjmp	.+10     	; 0x92c <ep_def_init+0x1da>
 922:	84 e0       	ldi	r24, 0x04	; 4
 924:	03 c0       	rjmp	.+6      	; 0x92c <ep_def_init+0x1da>
 926:	85 e0       	ldi	r24, 0x05	; 5
 928:	01 c0       	rjmp	.+2      	; 0x92c <ep_def_init+0x1da>
 92a:	87 e0       	ldi	r24, 0x07	; 7
 92c:	82 2b       	or	r24, r18
 92e:	81 83       	std	Z+1, r24	; 0x01
		}
	}
}
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <ep_def_in>:

void ep_def_in(EP_data *p)
{
 936:	df 92       	push	r13
 938:	ef 92       	push	r14
 93a:	ff 92       	push	r15
 93c:	0f 93       	push	r16
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	ec 01       	movw	r28, r24
	unsigned char ad;
	USB_EP_t *c;
	USB_EP_t *b;

	ad=p->ep&0x0f;
 946:	28 81       	ld	r18, Y
 948:	02 2f       	mov	r16, r18
 94a:	0f 70       	andi	r16, 0x0F	; 15
	c=&endpoints[ad].out;
 94c:	10 e0       	ldi	r17, 0x00	; 0
 94e:	c8 01       	movw	r24, r16
 950:	82 95       	swap	r24
 952:	92 95       	swap	r25
 954:	90 7f       	andi	r25, 0xF0	; 240
 956:	98 27       	eor	r25, r24
 958:	80 7f       	andi	r24, 0xF0	; 240
 95a:	98 27       	eor	r25, r24
 95c:	ac 01       	movw	r20, r24
 95e:	40 50       	subi	r20, 0x00	; 0
 960:	50 4e       	sbci	r21, 0xE0	; 224
 962:	7a 01       	movw	r14, r20
	if(p->ep&USB_EP_PP)
 964:	26 ff       	sbrs	r18, 6
 966:	43 c0       	rjmp	.+134    	; 0x9ee <ep_def_in+0xb8>
	{
		if(!p->bank)
 968:	8a 81       	ldd	r24, Y+2	; 0x02
 96a:	81 11       	cpse	r24, r1
 96c:	1c c0       	rjmp	.+56     	; 0x9a6 <ep_def_in+0x70>
		{
			// incomming data (out-endpoint)
			// bank ist set ; the next action is made with bank 1
			// if out-endpoint the data from the last aktion (receiving data) are on bank 0
			b=&endpoints[ad].out;
			if(c->STATUS&(USB_EP_TRNCOMPL0_bm))
 96e:	fa 01       	movw	r30, r20
 970:	80 81       	ld	r24, Z
 972:	85 ff       	sbrs	r24, 5
 974:	55 c0       	rjmp	.+170    	; 0xa20 <ep_def_in+0xea>
			{
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 976:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 978:	f8 94       	cli
				{
					if(p->handler((unsigned char *)b->DATAPTR,b->CNT))
 97a:	fa 01       	movw	r30, r20
 97c:	62 81       	ldd	r22, Z+2	; 0x02
 97e:	73 81       	ldd	r23, Z+3	; 0x03
 980:	84 81       	ldd	r24, Z+4	; 0x04
 982:	95 81       	ldd	r25, Z+5	; 0x05
 984:	ef 81       	ldd	r30, Y+7	; 0x07
 986:	f8 85       	ldd	r31, Y+8	; 0x08
 988:	19 95       	eicall
 98a:	89 2b       	or	r24, r25
 98c:	51 f0       	breq	.+20     	; 0x9a2 <ep_def_in+0x6c>
					{
						b->CNT=p->len-1;
 98e:	8d 81       	ldd	r24, Y+5	; 0x05
 990:	9e 81       	ldd	r25, Y+6	; 0x06
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	f7 01       	movw	r30, r14
 996:	82 83       	std	Z+2, r24	; 0x02
 998:	93 83       	std	Z+3, r25	; 0x03
						LACR16(&(c->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm | USB_EP_OVF_bm);
 99a:	02 e6       	ldi	r16, 0x62	; 98
 99c:	06 93       	lac	Z, r16
						p->bank=1;
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	8a 83       	std	Y+2, r24	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9a2:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
 9a4:	3d c0       	rjmp	.+122    	; 0xa20 <ep_def_in+0xea>
		{
			// incomming data (out-endpoint)
			// bank ist not set ; the next action is made with bank 0
			// if out-endpoint the data from the last aktion (receiving data) are on bank 1
			b=&endpoints[ad].in;
			if(c->STATUS&(USB_EP_TRNCOMPL1_bm))
 9a6:	fa 01       	movw	r30, r20
 9a8:	80 81       	ld	r24, Z
 9aa:	84 ff       	sbrs	r24, 4
 9ac:	39 c0       	rjmp	.+114    	; 0xa20 <ep_def_in+0xea>
		else
		{
			// incomming data (out-endpoint)
			// bank ist not set ; the next action is made with bank 0
			// if out-endpoint the data from the last aktion (receiving data) are on bank 1
			b=&endpoints[ad].in;
 9ae:	02 95       	swap	r16
 9b0:	12 95       	swap	r17
 9b2:	10 7f       	andi	r17, 0xF0	; 240
 9b4:	10 27       	eor	r17, r16
 9b6:	00 7f       	andi	r16, 0xF0	; 240
 9b8:	10 27       	eor	r17, r16
 9ba:	08 5f       	subi	r16, 0xF8	; 248
 9bc:	1f 4d       	sbci	r17, 0xDF	; 223
			if(c->STATUS&(USB_EP_TRNCOMPL1_bm))
			{
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 9be:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9c0:	f8 94       	cli
				{
					if(p->handler((unsigned char *)b->DATAPTR,b->CNT))
 9c2:	f8 01       	movw	r30, r16
 9c4:	62 81       	ldd	r22, Z+2	; 0x02
 9c6:	73 81       	ldd	r23, Z+3	; 0x03
 9c8:	84 81       	ldd	r24, Z+4	; 0x04
 9ca:	95 81       	ldd	r25, Z+5	; 0x05
 9cc:	ef 81       	ldd	r30, Y+7	; 0x07
 9ce:	f8 85       	ldd	r31, Y+8	; 0x08
 9d0:	19 95       	eicall
 9d2:	89 2b       	or	r24, r25
 9d4:	51 f0       	breq	.+20     	; 0x9ea <ep_def_in+0xb4>
					{
						b->CNT=p->len-1;
 9d6:	8d 81       	ldd	r24, Y+5	; 0x05
 9d8:	9e 81       	ldd	r25, Y+6	; 0x06
 9da:	01 97       	sbiw	r24, 0x01	; 1
 9dc:	f8 01       	movw	r30, r16
 9de:	82 83       	std	Z+2, r24	; 0x02
 9e0:	93 83       	std	Z+3, r25	; 0x03
						LACR16(&(c->STATUS), USB_EP_BUSNACK1_bm | USB_EP_TRNCOMPL1_bm | USB_EP_OVF_bm);
 9e2:	f7 01       	movw	r30, r14
 9e4:	04 e5       	ldi	r16, 0x54	; 84
 9e6:	06 93       	lac	Z, r16
						p->bank=0;
 9e8:	1a 82       	std	Y+2, r1	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9ea:	df be       	out	0x3f, r13	; 63
    __asm__ volatile ("" ::: "memory");
 9ec:	19 c0       	rjmp	.+50     	; 0xa20 <ep_def_in+0xea>
	}
	else
	{
		// incomming data (out-endpoint)
		b=c;
		if(c->STATUS&(USB_EP_TRNCOMPL0_bm))
 9ee:	fa 01       	movw	r30, r20
 9f0:	80 81       	ld	r24, Z
 9f2:	85 ff       	sbrs	r24, 5
 9f4:	15 c0       	rjmp	.+42     	; 0xa20 <ep_def_in+0xea>
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 9f6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9f8:	f8 94       	cli
			{
				if(p->handler((unsigned char *)b->DATAPTR,b->CNT))
 9fa:	fa 01       	movw	r30, r20
 9fc:	62 81       	ldd	r22, Z+2	; 0x02
 9fe:	73 81       	ldd	r23, Z+3	; 0x03
 a00:	84 81       	ldd	r24, Z+4	; 0x04
 a02:	95 81       	ldd	r25, Z+5	; 0x05
 a04:	ef 81       	ldd	r30, Y+7	; 0x07
 a06:	f8 85       	ldd	r31, Y+8	; 0x08
 a08:	19 95       	eicall
 a0a:	89 2b       	or	r24, r25
 a0c:	41 f0       	breq	.+16     	; 0xa1e <ep_def_in+0xe8>
				{
					b->CNT=p->len;
 a0e:	8d 81       	ldd	r24, Y+5	; 0x05
 a10:	9e 81       	ldd	r25, Y+6	; 0x06
 a12:	f7 01       	movw	r30, r14
 a14:	82 83       	std	Z+2, r24	; 0x02
 a16:	93 83       	std	Z+3, r25	; 0x03
					LACR16(&(c->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm | USB_EP_OVF_bm);
 a18:	02 e6       	ldi	r16, 0x62	; 98
 a1a:	06 93       	lac	Z, r16
					p->bank=0;
 a1c:	1a 82       	std	Y+2, r1	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a1e:	1f bf       	out	0x3f, r17	; 63
				}
			}
		}
	}
}
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	ef 90       	pop	r14
 a2c:	df 90       	pop	r13
 a2e:	08 95       	ret

00000a30 <ep_def_out>:

void ep_def_out(EP_data *p)
{
 a30:	df 92       	push	r13
 a32:	ef 92       	push	r14
 a34:	ff 92       	push	r15
 a36:	0f 93       	push	r16
 a38:	1f 93       	push	r17
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	7c 01       	movw	r14, r24
	unsigned int le;
	unsigned char ad;
	USB_EP_t *c;
	USB_EP_t *b;

	ad=p->ep&0x0f;
 a40:	dc 01       	movw	r26, r24
 a42:	8c 91       	ld	r24, X
 a44:	08 2f       	mov	r16, r24
 a46:	0f 70       	andi	r16, 0x0F	; 15
	c=&endpoints[ad].in;
 a48:	10 e0       	ldi	r17, 0x00	; 0
 a4a:	e8 01       	movw	r28, r16
 a4c:	c2 95       	swap	r28
 a4e:	d2 95       	swap	r29
 a50:	d0 7f       	andi	r29, 0xF0	; 240
 a52:	dc 27       	eor	r29, r28
 a54:	c0 7f       	andi	r28, 0xF0	; 240
 a56:	dc 27       	eor	r29, r28
 a58:	c8 5f       	subi	r28, 0xF8	; 248
 a5a:	df 4d       	sbci	r29, 0xDF	; 223

	if(p->ep&USB_EP_PP)
 a5c:	86 ff       	sbrs	r24, 6
 a5e:	4a c0       	rjmp	.+148    	; 0xaf4 <ep_def_out+0xc4>
	{
		if(p->bank)
 a60:	12 96       	adiw	r26, 0x02	; 2
 a62:	8c 91       	ld	r24, X
 a64:	88 23       	and	r24, r24
 a66:	49 f1       	breq	.+82     	; 0xaba <ep_def_out+0x8a>
		{
			// outgoing data (in-endpoint)
			// bank ist set ; the next action is made with bank 1
			// if in-endpoint the data for the next aktion (sending data) are on bank 1
			b=&endpoints[ad].out;
			if(c->STATUS&(USB_EP_BUSNACK1_bm))
 a68:	88 81       	ld	r24, Y
 a6a:	82 ff       	sbrs	r24, 2
 a6c:	5c c0       	rjmp	.+184    	; 0xb26 <ep_def_out+0xf6>
		if(p->bank)
		{
			// outgoing data (in-endpoint)
			// bank ist set ; the next action is made with bank 1
			// if in-endpoint the data for the next aktion (sending data) are on bank 1
			b=&endpoints[ad].out;
 a6e:	02 95       	swap	r16
 a70:	12 95       	swap	r17
 a72:	10 7f       	andi	r17, 0xF0	; 240
 a74:	10 27       	eor	r17, r16
 a76:	00 7f       	andi	r16, 0xF0	; 240
 a78:	10 27       	eor	r17, r16
 a7a:	00 50       	subi	r16, 0x00	; 0
 a7c:	10 4e       	sbci	r17, 0xE0	; 224
			if(c->STATUS&(USB_EP_BUSNACK1_bm))
			{
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 a7e:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 a80:	f8 94       	cli
				{
					le=p->handler((unsigned char *)b->DATAPTR,(p->len)-1);
 a82:	f8 01       	movw	r30, r16
 a84:	84 81       	ldd	r24, Z+4	; 0x04
 a86:	95 81       	ldd	r25, Z+5	; 0x05
 a88:	d7 01       	movw	r26, r14
 a8a:	15 96       	adiw	r26, 0x05	; 5
 a8c:	6d 91       	ld	r22, X+
 a8e:	7c 91       	ld	r23, X
 a90:	16 97       	sbiw	r26, 0x06	; 6
 a92:	61 50       	subi	r22, 0x01	; 1
 a94:	71 09       	sbc	r23, r1
 a96:	17 96       	adiw	r26, 0x07	; 7
 a98:	ed 91       	ld	r30, X+
 a9a:	fc 91       	ld	r31, X
 a9c:	18 97       	sbiw	r26, 0x08	; 8
 a9e:	19 95       	eicall
					if(le)
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	49 f0       	breq	.+18     	; 0xab6 <ep_def_out+0x86>
					{
						b->CNT=le;
 aa4:	f8 01       	movw	r30, r16
 aa6:	82 83       	std	Z+2, r24	; 0x02
 aa8:	93 83       	std	Z+3, r25	; 0x03
						LACR16(&(c->STATUS), USB_EP_BUSNACK1_bm | USB_EP_TRNCOMPL1_bm);
 aaa:	fe 01       	movw	r30, r28
 aac:	04 e1       	ldi	r16, 0x14	; 20
 aae:	06 93       	lac	Z, r16
						p->bank=0;
 ab0:	d7 01       	movw	r26, r14
 ab2:	12 96       	adiw	r26, 0x02	; 2
 ab4:	1c 92       	st	X, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 ab6:	df be       	out	0x3f, r13	; 63
    __asm__ volatile ("" ::: "memory");
 ab8:	36 c0       	rjmp	.+108    	; 0xb26 <ep_def_out+0xf6>
		{
			// incomming data (out-endpoint)
			// bank ist not set ; the next action is made with bank 0
			// if out-endpoint the data from the last aktion (receiving data) are on bank 1
			b=&endpoints[ad].in;
			if(c->STATUS&(USB_EP_BUSNACK0_bm))
 aba:	88 81       	ld	r24, Y
 abc:	81 ff       	sbrs	r24, 1
 abe:	33 c0       	rjmp	.+102    	; 0xb26 <ep_def_out+0xf6>
			{
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 ac0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 ac2:	f8 94       	cli
				{
					le=p->handler((unsigned char *)b->DATAPTR,(p->len)-1);
 ac4:	8c 81       	ldd	r24, Y+4	; 0x04
 ac6:	9d 81       	ldd	r25, Y+5	; 0x05
 ac8:	f7 01       	movw	r30, r14
 aca:	65 81       	ldd	r22, Z+5	; 0x05
 acc:	76 81       	ldd	r23, Z+6	; 0x06
 ace:	61 50       	subi	r22, 0x01	; 1
 ad0:	71 09       	sbc	r23, r1
 ad2:	07 80       	ldd	r0, Z+7	; 0x07
 ad4:	f0 85       	ldd	r31, Z+8	; 0x08
 ad6:	e0 2d       	mov	r30, r0
 ad8:	19 95       	eicall
					if(le)
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	49 f0       	breq	.+18     	; 0xaf0 <ep_def_out+0xc0>
					{
						b->CNT=le;
 ade:	8a 83       	std	Y+2, r24	; 0x02
 ae0:	9b 83       	std	Y+3, r25	; 0x03
						LACR16(&(c->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 ae2:	fe 01       	movw	r30, r28
 ae4:	02 e2       	ldi	r16, 0x22	; 34
 ae6:	06 93       	lac	Z, r16
						p->bank=1;
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	d7 01       	movw	r26, r14
 aec:	12 96       	adiw	r26, 0x02	; 2
 aee:	8c 93       	st	X, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 af0:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
 af2:	19 c0       	rjmp	.+50     	; 0xb26 <ep_def_out+0xf6>
	}
	else
	{
		// outgoing data (in-endpoint)
		b=c;
		if(c->STATUS&(USB_EP_BUSNACK0_bm))
 af4:	88 81       	ld	r24, Y
 af6:	81 ff       	sbrs	r24, 1
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <ep_def_out+0xf6>
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 afa:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 afc:	f8 94       	cli
			{
				le=p->handler((unsigned char *)b->DATAPTR,p->len);
 afe:	8c 81       	ldd	r24, Y+4	; 0x04
 b00:	9d 81       	ldd	r25, Y+5	; 0x05
 b02:	f7 01       	movw	r30, r14
 b04:	65 81       	ldd	r22, Z+5	; 0x05
 b06:	76 81       	ldd	r23, Z+6	; 0x06
 b08:	07 80       	ldd	r0, Z+7	; 0x07
 b0a:	f0 85       	ldd	r31, Z+8	; 0x08
 b0c:	e0 2d       	mov	r30, r0
 b0e:	19 95       	eicall
				if(le)
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	41 f0       	breq	.+16     	; 0xb24 <ep_def_out+0xf4>
				{
					b->CNT=le;
 b14:	8a 83       	std	Y+2, r24	; 0x02
 b16:	9b 83       	std	Y+3, r25	; 0x03
					LACR16(&(c->STATUS), USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm);
 b18:	fe 01       	movw	r30, r28
 b1a:	02 e2       	ldi	r16, 0x22	; 34
 b1c:	06 93       	lac	Z, r16
					p->bank=0;
 b1e:	d7 01       	movw	r26, r14
 b20:	12 96       	adiw	r26, 0x02	; 2
 b22:	1c 92       	st	X, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 b24:	1f bf       	out	0x3f, r17	; 63
				}
			}
		}
	}
}
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	08 95       	ret

00000b36 <USB_ResetInterface>:
    
	DFLLRC2M.CTRL = DFLL_ENABLE_bm;

	CCP = CCP_IOREG_gc; //Security Signature to modify clock 
	CLK.CTRL = CLK_SCLKSEL_PLL_gc; // Select PLL
	CLK.PSCTRL = 0x00; // No peripheral clock prescaler
 b36:	83 e0       	ldi	r24, 0x03	; 3
 b38:	e0 e4       	ldi	r30, 0x40	; 64
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	84 83       	std	Z+4, r24	; 0x04
 b3e:	a0 e0       	ldi	r26, 0x00	; 0
 b40:	b0 e2       	ldi	r27, 0x20	; 32
 b42:	e0 ec       	ldi	r30, 0xC0	; 192
 b44:	f4 e0       	ldi	r31, 0x04	; 4
 b46:	a6 83       	std	Z+6, r26	; 0x06
 b48:	b7 83       	std	Z+7, r27	; 0x07
 b4a:	13 82       	std	Z+3, r1	; 0x03
 b4c:	1c 92       	st	X, r1
 b4e:	23 e4       	ldi	r18, 0x43	; 67
 b50:	20 93 01 20 	sts	0x2001, r18
 b54:	8a e6       	ldi	r24, 0x6A	; 106
 b56:	93 e2       	ldi	r25, 0x23	; 35
 b58:	80 93 04 20 	sts	0x2004, r24
 b5c:	90 93 05 20 	sts	0x2005, r25
 b60:	82 e0       	ldi	r24, 0x02	; 2
 b62:	80 93 08 20 	sts	0x2008, r24
 b66:	20 93 09 20 	sts	0x2009, r18
 b6a:	8a e2       	ldi	r24, 0x2A	; 42
 b6c:	93 e2       	ldi	r25, 0x23	; 35
 b6e:	80 93 0c 20 	sts	0x200C, r24
 b72:	90 93 0d 20 	sts	0x200D, r25
 b76:	8f ec       	ldi	r24, 0xCF	; 207
 b78:	80 83       	st	Z, r24
 b7a:	81 81       	ldd	r24, Z+1	; 0x01
 b7c:	81 60       	ori	r24, 0x01	; 1
 b7e:	81 83       	std	Z+1, r24	; 0x01
 b80:	08 95       	ret

00000b82 <USB_xm_Init>:
 b82:	82 e0       	ldi	r24, 0x02	; 2
 b84:	e0 ec       	ldi	r30, 0xC0	; 192
 b86:	f1 e0       	ldi	r31, 0x01	; 1
 b88:	82 87       	std	Z+10, r24	; 0x0a
 b8a:	ea e1       	ldi	r30, 0x1A	; 26
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	e4 91       	lpm	r30, Z
 b90:	a0 ec       	ldi	r26, 0xC0	; 192
 b92:	b4 e0       	ldi	r27, 0x04	; 4
 b94:	da 96       	adiw	r26, 0x3a	; 58
 b96:	ec 93       	st	X, r30
 b98:	da 97       	sbiw	r26, 0x3a	; 58
 b9a:	10 92 ca 01 	sts	0x01CA, r1
 b9e:	e0 ec       	ldi	r30, 0xC0	; 192
 ba0:	f1 e0       	ldi	r31, 0x01	; 1
 ba2:	82 87       	std	Z+10, r24	; 0x0a
 ba4:	eb e1       	ldi	r30, 0x1B	; 27
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	e4 91       	lpm	r30, Z
 baa:	db 96       	adiw	r26, 0x3b	; 59
 bac:	ec 93       	st	X, r30
 bae:	10 92 ca 01 	sts	0x01CA, r1
 bb2:	c1 cf       	rjmp	.-126    	; 0xb36 <USB_ResetInterface>
 bb4:	08 95       	ret

00000bb6 <USB_ep0_send_progmem>:
 bb6:	0f 93       	push	r16
 bb8:	e0 ec       	ldi	r30, 0xC0	; 192
 bba:	f1 e0       	ldi	r31, 0x01	; 1
 bbc:	12 86       	std	Z+10, r1	; 0x0a
 bbe:	61 15       	cp	r22, r1
 bc0:	71 05       	cpc	r23, r1
 bc2:	61 f0       	breq	.+24     	; 0xbdc <USB_ep0_send_progmem+0x26>
 bc4:	aa e2       	ldi	r26, 0x2A	; 42
 bc6:	b3 e2       	ldi	r27, 0x23	; 35
 bc8:	9c 01       	movw	r18, r24
 bca:	26 0f       	add	r18, r22
 bcc:	37 1f       	adc	r19, r23
 bce:	fc 01       	movw	r30, r24
 bd0:	84 91       	lpm	r24, Z
 bd2:	8d 93       	st	X+, r24
 bd4:	31 96       	adiw	r30, 0x01	; 1
 bd6:	e2 17       	cp	r30, r18
 bd8:	f3 07       	cpc	r31, r19
 bda:	d1 f7       	brne	.-12     	; 0xbd0 <USB_ep0_send_progmem+0x1a>
 bdc:	8a e2       	ldi	r24, 0x2A	; 42
 bde:	93 e2       	ldi	r25, 0x23	; 35
 be0:	80 93 0c 20 	sts	0x200C, r24
 be4:	90 93 0d 20 	sts	0x200D, r25
 be8:	60 93 0a 20 	sts	0x200A, r22
 bec:	70 93 0b 20 	sts	0x200B, r23
 bf0:	e8 e0       	ldi	r30, 0x08	; 8
 bf2:	f0 e2       	ldi	r31, 0x20	; 32
 bf4:	02 e2       	ldi	r16, 0x22	; 34
 bf6:	06 93       	lac	Z, r16
 bf8:	0f 91       	pop	r16
 bfa:	08 95       	ret

00000bfc <USB_HandleSetup>:
 bfc:	0f 93       	push	r16
 bfe:	cf 93       	push	r28
 c00:	df 93       	push	r29
 c02:	1f 92       	push	r1
 c04:	1f 92       	push	r1
 c06:	cd b7       	in	r28, 0x3d	; 61
 c08:	de b7       	in	r29, 0x3e	; 62
 c0a:	80 91 6a 23 	lds	r24, 0x236A
 c0e:	80 76       	andi	r24, 0x60	; 96
 c10:	09 f0       	breq	.+2      	; 0xc14 <USB_HandleSetup+0x18>
 c12:	1c c1       	rjmp	.+568    	; 0xe4c <USB_HandleSetup+0x250>
 c14:	80 91 6b 23 	lds	r24, 0x236B
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	8c 30       	cpi	r24, 0x0C	; 12
 c1c:	91 05       	cpc	r25, r1
 c1e:	08 f0       	brcs	.+2      	; 0xc22 <USB_HandleSetup+0x26>
 c20:	15 c1       	rjmp	.+554    	; 0xe4c <USB_HandleSetup+0x250>
 c22:	fc 01       	movw	r30, r24
 c24:	e2 50       	subi	r30, 0x02	; 2
 c26:	ff 4f       	sbci	r31, 0xFF	; 255
 c28:	d0 c1       	rjmp	.+928    	; 0xfca <__tablejump2__>
 c2a:	ea e2       	ldi	r30, 0x2A	; 42
 c2c:	f3 e2       	ldi	r31, 0x23	; 35
 c2e:	10 82       	st	Z, r1
 c30:	10 92 2b 23 	sts	0x232B, r1
 c34:	e0 93 0c 20 	sts	0x200C, r30
 c38:	f0 93 0d 20 	sts	0x200D, r31
 c3c:	82 e0       	ldi	r24, 0x02	; 2
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	80 93 0a 20 	sts	0x200A, r24
 c44:	90 93 0b 20 	sts	0x200B, r25
 c48:	e8 e0       	ldi	r30, 0x08	; 8
 c4a:	f0 e2       	ldi	r31, 0x20	; 32
 c4c:	02 e2       	ldi	r16, 0x22	; 34
 c4e:	06 93       	lac	Z, r16
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	01 c1       	rjmp	.+514    	; 0xe56 <USB_HandleSetup+0x25a>
 c54:	8a e2       	ldi	r24, 0x2A	; 42
 c56:	93 e2       	ldi	r25, 0x23	; 35
 c58:	80 93 0c 20 	sts	0x200C, r24
 c5c:	90 93 0d 20 	sts	0x200D, r25
 c60:	10 92 0a 20 	sts	0x200A, r1
 c64:	10 92 0b 20 	sts	0x200B, r1
 c68:	e8 e0       	ldi	r30, 0x08	; 8
 c6a:	f0 e2       	ldi	r31, 0x20	; 32
 c6c:	02 e2       	ldi	r16, 0x22	; 34
 c6e:	06 93       	lac	Z, r16
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	f1 c0       	rjmp	.+482    	; 0xe56 <USB_HandleSetup+0x25a>
 c74:	20 91 6c 23 	lds	r18, 0x236C
 c78:	2f 77       	andi	r18, 0x7F	; 127
 c7a:	e0 e0       	ldi	r30, 0x00	; 0
 c7c:	f0 e2       	ldi	r31, 0x20	; 32
 c7e:	02 e7       	ldi	r16, 0x72	; 114
 c80:	06 93       	lac	Z, r16
 c82:	8a e2       	ldi	r24, 0x2A	; 42
 c84:	93 e2       	ldi	r25, 0x23	; 35
 c86:	80 93 0c 20 	sts	0x200C, r24
 c8a:	90 93 0d 20 	sts	0x200D, r25
 c8e:	10 92 0a 20 	sts	0x200A, r1
 c92:	10 92 0b 20 	sts	0x200B, r1
 c96:	e8 e0       	ldi	r30, 0x08	; 8
 c98:	f0 e2       	ldi	r31, 0x20	; 32
 c9a:	02 e2       	ldi	r16, 0x22	; 34
 c9c:	06 93       	lac	Z, r16
 c9e:	80 81       	ld	r24, Z
 ca0:	85 ff       	sbrs	r24, 5
 ca2:	fd cf       	rjmp	.-6      	; 0xc9e <USB_HandleSetup+0xa2>
 ca4:	e0 ec       	ldi	r30, 0xC0	; 192
 ca6:	f4 e0       	ldi	r31, 0x04	; 4
 ca8:	23 83       	std	Z+3, r18	; 0x03
 caa:	22 23       	and	r18, r18
 cac:	11 f0       	breq	.+4      	; 0xcb2 <USB_HandleSetup+0xb6>
 cae:	83 e0       	ldi	r24, 0x03	; 3
 cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <USB_HandleSetup+0xb8>
 cb2:	82 e0       	ldi	r24, 0x02	; 2
 cb4:	80 93 aa 23 	sts	0x23AA, r24
 cb8:	81 e0       	ldi	r24, 0x01	; 1
 cba:	cd c0       	rjmp	.+410    	; 0xe56 <USB_HandleSetup+0x25a>
 cbc:	e0 ec       	ldi	r30, 0xC0	; 192
 cbe:	f1 e0       	ldi	r31, 0x01	; 1
 cc0:	12 86       	std	Z+10, r1	; 0x0a
 cc2:	80 91 6c 23 	lds	r24, 0x236C
 cc6:	90 91 6d 23 	lds	r25, 0x236D
 cca:	8c 3d       	cpi	r24, 0xDC	; 220
 ccc:	23 e0       	ldi	r18, 0x03	; 3
 cce:	92 07       	cpc	r25, r18
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <USB_HandleSetup+0xd8>
 cd2:	3b c0       	rjmp	.+118    	; 0xd4a <USB_HandleSetup+0x14e>
 cd4:	83 e0       	ldi	r24, 0x03	; 3
 cd6:	80 93 2b 23 	sts	0x232B, r24
 cda:	8a e3       	ldi	r24, 0x3A	; 58
 cdc:	80 93 2a 23 	sts	0x232A, r24
 ce0:	ac e2       	ldi	r26, 0x2C	; 44
 ce2:	b3 e2       	ldi	r27, 0x23	; 35
 ce4:	40 e0       	ldi	r20, 0x00	; 0
 ce6:	58 e0       	ldi	r21, 0x08	; 8
 ce8:	20 ec       	ldi	r18, 0xC0	; 192
 cea:	31 e0       	ldi	r19, 0x01	; 1
 cec:	62 e0       	ldi	r22, 0x02	; 2
 cee:	8a ec       	ldi	r24, 0xCA	; 202
 cf0:	91 e0       	ldi	r25, 0x01	; 1
 cf2:	f9 01       	movw	r30, r18
 cf4:	62 87       	std	Z+10, r22	; 0x0a
 cf6:	e5 2f       	mov	r30, r21
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	74 91       	lpm	r23, Z
 cfc:	fc 01       	movw	r30, r24
 cfe:	10 82       	st	Z, r1
 d00:	40 ff       	sbrs	r20, 0
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <USB_HandleSetup+0x10e>
 d04:	72 95       	swap	r23
 d06:	7f 70       	andi	r23, 0x0F	; 15
 d08:	5f 5f       	subi	r21, 0xFF	; 255
 d0a:	e7 2f       	mov	r30, r23
 d0c:	ef 70       	andi	r30, 0x0F	; 15
 d0e:	ea 30       	cpi	r30, 0x0A	; 10
 d10:	18 f0       	brcs	.+6      	; 0xd18 <USB_HandleSetup+0x11c>
 d12:	f0 e0       	ldi	r31, 0x00	; 0
 d14:	f7 96       	adiw	r30, 0x37	; 55
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <USB_HandleSetup+0x120>
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	f0 96       	adiw	r30, 0x30	; 48
 d1c:	ed 93       	st	X+, r30
 d1e:	fd 93       	st	X+, r31
 d20:	4f 5f       	subi	r20, 0xFF	; 255
 d22:	4c 31       	cpi	r20, 0x1C	; 28
 d24:	31 f7       	brne	.-52     	; 0xcf2 <USB_HandleSetup+0xf6>
 d26:	8a e2       	ldi	r24, 0x2A	; 42
 d28:	93 e2       	ldi	r25, 0x23	; 35
 d2a:	80 93 0c 20 	sts	0x200C, r24
 d2e:	90 93 0d 20 	sts	0x200D, r25
 d32:	8a e3       	ldi	r24, 0x3A	; 58
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	80 93 0a 20 	sts	0x200A, r24
 d3a:	90 93 0b 20 	sts	0x200B, r25
 d3e:	e8 e0       	ldi	r30, 0x08	; 8
 d40:	f0 e2       	ldi	r31, 0x20	; 32
 d42:	02 e2       	ldi	r16, 0x22	; 34
 d44:	06 93       	lac	Z, r16
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	86 c0       	rjmp	.+268    	; 0xe56 <USB_HandleSetup+0x25a>
 d4a:	ae 01       	movw	r20, r28
 d4c:	4f 5f       	subi	r20, 0xFF	; 255
 d4e:	5f 4f       	sbci	r21, 0xFF	; 255
 d50:	60 91 6e 23 	lds	r22, 0x236E
 d54:	c1 da       	rcall	.-2686   	; 0x2d8 <CALLBACK_USB_GetDescriptor>
 d56:	00 97       	sbiw	r24, 0x00	; 0
 d58:	71 f0       	breq	.+28     	; 0xd76 <USB_HandleSetup+0x17a>
 d5a:	20 91 70 23 	lds	r18, 0x2370
 d5e:	30 91 71 23 	lds	r19, 0x2371
 d62:	bc 01       	movw	r22, r24
 d64:	28 17       	cp	r18, r24
 d66:	39 07       	cpc	r19, r25
 d68:	08 f4       	brcc	.+2      	; 0xd6c <USB_HandleSetup+0x170>
 d6a:	b9 01       	movw	r22, r18
 d6c:	89 81       	ldd	r24, Y+1	; 0x01
 d6e:	9a 81       	ldd	r25, Y+2	; 0x02
 d70:	22 df       	rcall	.-444    	; 0xbb6 <USB_ep0_send_progmem>
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	70 c0       	rjmp	.+224    	; 0xe56 <USB_HandleSetup+0x25a>
 d76:	80 e0       	ldi	r24, 0x00	; 0
 d78:	6e c0       	rjmp	.+220    	; 0xe56 <USB_HandleSetup+0x25a>
 d7a:	80 91 ab 23 	lds	r24, 0x23AB
 d7e:	ea e2       	ldi	r30, 0x2A	; 42
 d80:	f3 e2       	ldi	r31, 0x23	; 35
 d82:	80 83       	st	Z, r24
 d84:	e0 93 0c 20 	sts	0x200C, r30
 d88:	f0 93 0d 20 	sts	0x200D, r31
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	80 93 0a 20 	sts	0x200A, r24
 d94:	90 93 0b 20 	sts	0x200B, r25
 d98:	e8 e0       	ldi	r30, 0x08	; 8
 d9a:	f0 e2       	ldi	r31, 0x20	; 32
 d9c:	02 e2       	ldi	r16, 0x22	; 34
 d9e:	06 93       	lac	Z, r16
 da0:	5a c0       	rjmp	.+180    	; 0xe56 <USB_HandleSetup+0x25a>
 da2:	ae 01       	movw	r20, r28
 da4:	4f 5f       	subi	r20, 0xFF	; 255
 da6:	5f 4f       	sbci	r21, 0xFF	; 255
 da8:	60 e0       	ldi	r22, 0x00	; 0
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	91 e0       	ldi	r25, 0x01	; 1
 dae:	94 da       	rcall	.-2776   	; 0x2d8 <CALLBACK_USB_GetDescriptor>
 db0:	88 23       	and	r24, r24
 db2:	91 f1       	breq	.+100    	; 0xe18 <USB_HandleSetup+0x21c>
 db4:	e0 ec       	ldi	r30, 0xC0	; 192
 db6:	f1 e0       	ldi	r31, 0x01	; 1
 db8:	12 86       	std	Z+10, r1	; 0x0a
 dba:	e9 81       	ldd	r30, Y+1	; 0x01
 dbc:	fa 81       	ldd	r31, Y+2	; 0x02
 dbe:	71 96       	adiw	r30, 0x11	; 17
 dc0:	e4 91       	lpm	r30, Z
 dc2:	20 91 6c 23 	lds	r18, 0x236C
 dc6:	e2 17       	cp	r30, r18
 dc8:	48 f1       	brcs	.+82     	; 0xe1c <USB_HandleSetup+0x220>
 dca:	8a e2       	ldi	r24, 0x2A	; 42
 dcc:	93 e2       	ldi	r25, 0x23	; 35
 dce:	80 93 0c 20 	sts	0x200C, r24
 dd2:	90 93 0d 20 	sts	0x200D, r25
 dd6:	10 92 0a 20 	sts	0x200A, r1
 dda:	10 92 0b 20 	sts	0x200B, r1
 dde:	e8 e0       	ldi	r30, 0x08	; 8
 de0:	f0 e2       	ldi	r31, 0x20	; 32
 de2:	02 e2       	ldi	r16, 0x22	; 34
 de4:	06 93       	lac	Z, r16
 de6:	20 93 ab 23 	sts	0x23AB, r18
 dea:	80 91 ab 23 	lds	r24, 0x23AB
 dee:	88 23       	and	r24, r24
 df0:	21 f0       	breq	.+8      	; 0xdfa <USB_HandleSetup+0x1fe>
 df2:	84 e0       	ldi	r24, 0x04	; 4
 df4:	80 93 aa 23 	sts	0x23AA, r24
 df8:	0a c0       	rjmp	.+20     	; 0xe0e <USB_HandleSetup+0x212>
 dfa:	e0 ec       	ldi	r30, 0xC0	; 192
 dfc:	f4 e0       	ldi	r31, 0x04	; 4
 dfe:	83 81       	ldd	r24, Z+3	; 0x03
 e00:	88 23       	and	r24, r24
 e02:	11 f0       	breq	.+4      	; 0xe08 <USB_HandleSetup+0x20c>
 e04:	84 e0       	ldi	r24, 0x04	; 4
 e06:	01 c0       	rjmp	.+2      	; 0xe0a <USB_HandleSetup+0x20e>
 e08:	81 e0       	ldi	r24, 0x01	; 1
 e0a:	80 93 aa 23 	sts	0x23AA, r24
 e0e:	80 91 ab 23 	lds	r24, 0x23AB
 e12:	cc db       	rcall	.-2152   	; 0x5ac <EVENT_USB_Device_ConfigurationChanged>
 e14:	81 e0       	ldi	r24, 0x01	; 1
 e16:	1f c0       	rjmp	.+62     	; 0xe56 <USB_HandleSetup+0x25a>
 e18:	80 e0       	ldi	r24, 0x00	; 0
 e1a:	1d c0       	rjmp	.+58     	; 0xe56 <USB_HandleSetup+0x25a>
 e1c:	80 e0       	ldi	r24, 0x00	; 0
 e1e:	1b c0       	rjmp	.+54     	; 0xe56 <USB_HandleSetup+0x25a>
 e20:	60 91 6c 23 	lds	r22, 0x236C
 e24:	80 91 6e 23 	lds	r24, 0x236E
 e28:	bf db       	rcall	.-2178   	; 0x5a8 <EVENT_USB_Device_SetInterface>
 e2a:	88 23       	and	r24, r24
 e2c:	a1 f0       	breq	.+40     	; 0xe56 <USB_HandleSetup+0x25a>
 e2e:	2a e2       	ldi	r18, 0x2A	; 42
 e30:	33 e2       	ldi	r19, 0x23	; 35
 e32:	20 93 0c 20 	sts	0x200C, r18
 e36:	30 93 0d 20 	sts	0x200D, r19
 e3a:	10 92 0a 20 	sts	0x200A, r1
 e3e:	10 92 0b 20 	sts	0x200B, r1
 e42:	e8 e0       	ldi	r30, 0x08	; 8
 e44:	f0 e2       	ldi	r31, 0x20	; 32
 e46:	02 e2       	ldi	r16, 0x22	; 34
 e48:	06 93       	lac	Z, r16
 e4a:	05 c0       	rjmp	.+10     	; 0xe56 <USB_HandleSetup+0x25a>
 e4c:	8a e6       	ldi	r24, 0x6A	; 106
 e4e:	93 e2       	ldi	r25, 0x23	; 35
 e50:	c9 db       	rcall	.-2158   	; 0x5e4 <EVENT_USB_Device_ControlRequest>
 e52:	01 c0       	rjmp	.+2      	; 0xe56 <USB_HandleSetup+0x25a>
 e54:	80 e0       	ldi	r24, 0x00	; 0
 e56:	0f 90       	pop	r0
 e58:	0f 90       	pop	r0
 e5a:	df 91       	pop	r29
 e5c:	cf 91       	pop	r28
 e5e:	0f 91       	pop	r16
 e60:	08 95       	ret

00000e62 <USB_Evt_Task>:
// USB Tasks
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
void USB_Evt_Task(void)
{
	if (USB.STATUS & USB_BUSRST_bm)
 e62:	e0 ec       	ldi	r30, 0xC0	; 192
 e64:	f4 e0       	ldi	r31, 0x04	; 4
 e66:	82 81       	ldd	r24, Z+2	; 0x02
 e68:	80 ff       	sbrs	r24, 0
 e6a:	04 c0       	rjmp	.+8      	; 0xe74 <USB_Evt_Task+0x12>
	{
		USB.STATUS &= ~USB_BUSRST_bm;
 e6c:	82 81       	ldd	r24, Z+2	; 0x02
 e6e:	8e 7f       	andi	r24, 0xFE	; 254
 e70:	82 83       	std	Z+2, r24	; 0x02
		USB_xm_Init();
 e72:	87 ce       	rjmp	.-754    	; 0xb82 <USB_xm_Init>
 e74:	08 95       	ret

00000e76 <__vector_125>:

///////////////////////////////////////////////////////////////////////////////////////
// global IRQ
///////////////////////////////////////////////////////////////////////////////////////
ISR(USB_BUSEVENT_vect)
{
 e76:	1f 92       	push	r1
 e78:	0f 92       	push	r0
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	0f 92       	push	r0
 e7e:	11 24       	eor	r1, r1
 e80:	0b b6       	in	r0, 0x3b	; 59
 e82:	0f 92       	push	r0
 e84:	2f 93       	push	r18
 e86:	3f 93       	push	r19
 e88:	4f 93       	push	r20
 e8a:	5f 93       	push	r21
 e8c:	6f 93       	push	r22
 e8e:	7f 93       	push	r23
 e90:	8f 93       	push	r24
 e92:	9f 93       	push	r25
 e94:	af 93       	push	r26
 e96:	bf 93       	push	r27
 e98:	ef 93       	push	r30
 e9a:	ff 93       	push	r31
	if (USB.INTFLAGSACLR & USB_SOFIF_bm)
 e9c:	e0 ec       	ldi	r30, 0xC0	; 192
 e9e:	f4 e0       	ldi	r31, 0x04	; 4
 ea0:	82 85       	ldd	r24, Z+10	; 0x0a
 ea2:	88 23       	and	r24, r24
 ea4:	1c f4       	brge	.+6      	; 0xeac <__vector_125+0x36>
	{
		USB.INTFLAGSACLR = USB_SOFIF_bm;
 ea6:	80 e8       	ldi	r24, 0x80	; 128
 ea8:	82 87       	std	Z+10, r24	; 0x0a
 eaa:	2a c0       	rjmp	.+84     	; 0xf00 <__vector_125+0x8a>
	}
	else if (USB.INTFLAGSACLR & (USB_CRCIF_bm | USB_UNFIF_bm | USB_OVFIF_bm))
 eac:	e0 ec       	ldi	r30, 0xC0	; 192
 eae:	f4 e0       	ldi	r31, 0x04	; 4
 eb0:	82 85       	ldd	r24, Z+10	; 0x0a
 eb2:	8e 70       	andi	r24, 0x0E	; 14
 eb4:	19 f0       	breq	.+6      	; 0xebc <__vector_125+0x46>
	{
		USB.INTFLAGSACLR = (USB_CRCIF_bm | USB_UNFIF_bm | USB_OVFIF_bm);
 eb6:	8e e0       	ldi	r24, 0x0E	; 14
 eb8:	82 87       	std	Z+10, r24	; 0x0a
 eba:	22 c0       	rjmp	.+68     	; 0xf00 <__vector_125+0x8a>
	}
	else if (USB.INTFLAGSACLR & USB_STALLIF_bm)
 ebc:	e0 ec       	ldi	r30, 0xC0	; 192
 ebe:	f4 e0       	ldi	r31, 0x04	; 4
 ec0:	82 85       	ldd	r24, Z+10	; 0x0a
 ec2:	80 ff       	sbrs	r24, 0
 ec4:	03 c0       	rjmp	.+6      	; 0xecc <__vector_125+0x56>
	{
		USB.INTFLAGSACLR = USB_STALLIF_bm;
 ec6:	81 e0       	ldi	r24, 0x01	; 1
 ec8:	82 87       	std	Z+10, r24	; 0x0a
 eca:	1a c0       	rjmp	.+52     	; 0xf00 <__vector_125+0x8a>
	}
	else
	{
		if (USB.INTFLAGSACLR & USB_SUSPENDIF_bm)
 ecc:	e0 ec       	ldi	r30, 0xC0	; 192
 ece:	f4 e0       	ldi	r31, 0x04	; 4
 ed0:	82 85       	ldd	r24, Z+10	; 0x0a
 ed2:	86 fd       	sbrc	r24, 6
		{
			EVENT_USB_Device_Suspend();
 ed4:	75 db       	rcall	.-2326   	; 0x5c0 <EVENT_USB_Device_Suspend>
		}

		if (USB.INTFLAGSACLR & USB_RESUMEIF_bm)
 ed6:	e0 ec       	ldi	r30, 0xC0	; 192
 ed8:	f4 e0       	ldi	r31, 0x04	; 4
 eda:	82 85       	ldd	r24, Z+10	; 0x0a
 edc:	85 fd       	sbrc	r24, 5
		{
			EVENT_USB_Device_WakeUp();
 ede:	71 db       	rcall	.-2334   	; 0x5c2 <EVENT_USB_Device_WakeUp>
		}

		if (USB.INTFLAGSACLR & USB_RSTIF_bm)
 ee0:	e0 ec       	ldi	r30, 0xC0	; 192
 ee2:	f4 e0       	ldi	r31, 0x04	; 4
 ee4:	82 85       	ldd	r24, Z+10	; 0x0a
 ee6:	84 ff       	sbrs	r24, 4
 ee8:	06 c0       	rjmp	.+12     	; 0xef6 <__vector_125+0x80>
		{
			USB.ADDR=0;
 eea:	13 82       	std	Z+3, r1	; 0x03
			USB_DeviceState=DEVICE_STATE_Default;
 eec:	82 e0       	ldi	r24, 0x02	; 2
 eee:	80 93 aa 23 	sts	0x23AA, r24
			USB_ResetInterface();
 ef2:	21 de       	rcall	.-958    	; 0xb36 <USB_ResetInterface>
			EVENT_USB_Device_Reset();
 ef4:	67 db       	rcall	.-2354   	; 0x5c4 <EVENT_USB_Device_Reset>
		}

		USB.INTFLAGSACLR = USB_SUSPENDIF_bm | USB_RESUMEIF_bm | USB_RSTIF_bm;
 ef6:	80 e7       	ldi	r24, 0x70	; 112
 ef8:	e0 ec       	ldi	r30, 0xC0	; 192
 efa:	f4 e0       	ldi	r31, 0x04	; 4
 efc:	82 87       	std	Z+10, r24	; 0x0a
		USB_Evt_Task();
 efe:	b1 df       	rcall	.-158    	; 0xe62 <USB_Evt_Task>
	}
}
 f00:	ff 91       	pop	r31
 f02:	ef 91       	pop	r30
 f04:	bf 91       	pop	r27
 f06:	af 91       	pop	r26
 f08:	9f 91       	pop	r25
 f0a:	8f 91       	pop	r24
 f0c:	7f 91       	pop	r23
 f0e:	6f 91       	pop	r22
 f10:	5f 91       	pop	r21
 f12:	4f 91       	pop	r20
 f14:	3f 91       	pop	r19
 f16:	2f 91       	pop	r18
 f18:	0f 90       	pop	r0
 f1a:	0b be       	out	0x3b, r0	; 59
 f1c:	0f 90       	pop	r0
 f1e:	0f be       	out	0x3f, r0	; 63
 f20:	0f 90       	pop	r0
 f22:	1f 90       	pop	r1
 f24:	18 95       	reti

00000f26 <USB_Task>:

///////////////////////////////////////////////////////////////////////////////////////
// is call from irq
///////////////////////////////////////////////////////////////////////////////////////
void USB_Task(void)
{
 f26:	0f 93       	push	r16
	// Read once to prevent race condition where SETUP packet is interpreted as OUT
	uint8_t status = endpoints[0].out.STATUS;
 f28:	80 91 00 20 	lds	r24, 0x2000

	if (status & USB_EP_SETUP_bm)
 f2c:	84 ff       	sbrs	r24, 4
 f2e:	12 c0       	rjmp	.+36     	; 0xf54 <USB_Task+0x2e>
	{
		if (!USB_HandleSetup())
 f30:	65 de       	rcall	.-822    	; 0xbfc <USB_HandleSetup>
 f32:	81 11       	cpse	r24, r1
 f34:	0a c0       	rjmp	.+20     	; 0xf4a <USB_Task+0x24>
		{
			endpoints[0].out.CTRL |= USB_EP_STALL_bm;
 f36:	e1 e0       	ldi	r30, 0x01	; 1
 f38:	f0 e2       	ldi	r31, 0x20	; 32
 f3a:	80 81       	ld	r24, Z
 f3c:	84 60       	ori	r24, 0x04	; 4
 f3e:	80 83       	st	Z, r24
			endpoints[0].in.CTRL |= USB_EP_STALL_bm; 
 f40:	e9 e0       	ldi	r30, 0x09	; 9
 f42:	f0 e2       	ldi	r31, 0x20	; 32
 f44:	80 81       	ld	r24, Z
 f46:	84 60       	ori	r24, 0x04	; 4
 f48:	80 83       	st	Z, r24
		}
		LACR16(&endpoints[0].out.STATUS, USB_EP_SETUP_bm | USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm | USB_EP_OVF_bm);
 f4a:	e0 e0       	ldi	r30, 0x00	; 0
 f4c:	f0 e2       	ldi	r31, 0x20	; 32
 f4e:	02 e7       	ldi	r16, 0x72	; 114
 f50:	06 93       	lac	Z, r16
 f52:	0d c0       	rjmp	.+26     	; 0xf6e <USB_Task+0x48>
	}
	else if(status & USB_EP_TRNCOMPL0_bm)
 f54:	85 ff       	sbrs	r24, 5
 f56:	0b c0       	rjmp	.+22     	; 0xf6e <USB_Task+0x48>
	{
		EVENT_USB_Device_ControlOUT((uint8_t *) ep0_buf_out, endpoints[0].out.CNT);
 f58:	60 91 02 20 	lds	r22, 0x2002
 f5c:	70 91 03 20 	lds	r23, 0x2003
 f60:	8a e6       	ldi	r24, 0x6A	; 106
 f62:	93 e2       	ldi	r25, 0x23	; 35
 f64:	30 db       	rcall	.-2464   	; 0x5c6 <EVENT_USB_Device_ControlOUT>
		LACR16(&endpoints[0].out.STATUS, USB_EP_SETUP_bm | USB_EP_BUSNACK0_bm | USB_EP_TRNCOMPL0_bm | USB_EP_OVF_bm);
 f66:	e0 e0       	ldi	r30, 0x00	; 0
 f68:	f0 e2       	ldi	r31, 0x20	; 32
 f6a:	02 e7       	ldi	r16, 0x72	; 114
 f6c:	06 93       	lac	Z, r16
	}
}
 f6e:	0f 91       	pop	r16
 f70:	08 95       	ret

00000f72 <__vector_126>:

///////////////////////////////////////////////////////////////////////////////////////
// irq for transaktion complete
///////////////////////////////////////////////////////////////////////////////////////
ISR(USB_TRNCOMPL_vect)
{
 f72:	1f 92       	push	r1
 f74:	0f 92       	push	r0
 f76:	0f b6       	in	r0, 0x3f	; 63
 f78:	0f 92       	push	r0
 f7a:	11 24       	eor	r1, r1
 f7c:	0b b6       	in	r0, 0x3b	; 59
 f7e:	0f 92       	push	r0
 f80:	2f 93       	push	r18
 f82:	3f 93       	push	r19
 f84:	4f 93       	push	r20
 f86:	5f 93       	push	r21
 f88:	6f 93       	push	r22
 f8a:	7f 93       	push	r23
 f8c:	8f 93       	push	r24
 f8e:	9f 93       	push	r25
 f90:	af 93       	push	r26
 f92:	bf 93       	push	r27
 f94:	ef 93       	push	r30
 f96:	ff 93       	push	r31
	USB.FIFOWP = 0;
 f98:	e0 ec       	ldi	r30, 0xC0	; 192
 f9a:	f4 e0       	ldi	r31, 0x04	; 4
 f9c:	14 82       	std	Z+4, r1	; 0x04
	USB.INTFLAGSBCLR = USB_SETUPIF_bm | USB_TRNIF_bm;
 f9e:	83 e0       	ldi	r24, 0x03	; 3
 fa0:	84 87       	std	Z+12, r24	; 0x0c
	USB_Task();
 fa2:	c1 df       	rcall	.-126    	; 0xf26 <USB_Task>
}
 fa4:	ff 91       	pop	r31
 fa6:	ef 91       	pop	r30
 fa8:	bf 91       	pop	r27
 faa:	af 91       	pop	r26
 fac:	9f 91       	pop	r25
 fae:	8f 91       	pop	r24
 fb0:	7f 91       	pop	r23
 fb2:	6f 91       	pop	r22
 fb4:	5f 91       	pop	r21
 fb6:	4f 91       	pop	r20
 fb8:	3f 91       	pop	r19
 fba:	2f 91       	pop	r18
 fbc:	0f 90       	pop	r0
 fbe:	0b be       	out	0x3b, r0	; 59
 fc0:	0f 90       	pop	r0
 fc2:	0f be       	out	0x3f, r0	; 63
 fc4:	0f 90       	pop	r0
 fc6:	1f 90       	pop	r1
 fc8:	18 95       	reti

00000fca <__tablejump2__>:
 fca:	ee 0f       	add	r30, r30
 fcc:	ff 1f       	adc	r31, r31

00000fce <__tablejump__>:
 fce:	05 90       	lpm	r0, Z+
 fd0:	f4 91       	lpm	r31, Z
 fd2:	e0 2d       	mov	r30, r0
 fd4:	19 94       	eijmp

00000fd6 <memcpy>:
 fd6:	fb 01       	movw	r30, r22
 fd8:	dc 01       	movw	r26, r24
 fda:	02 c0       	rjmp	.+4      	; 0xfe0 <memcpy+0xa>
 fdc:	01 90       	ld	r0, Z+
 fde:	0d 92       	st	X+, r0
 fe0:	41 50       	subi	r20, 0x01	; 1
 fe2:	50 40       	sbci	r21, 0x00	; 0
 fe4:	d8 f7       	brcc	.-10     	; 0xfdc <memcpy+0x6>
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
